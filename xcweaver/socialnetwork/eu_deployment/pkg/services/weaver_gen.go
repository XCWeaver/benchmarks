// Code generated by "xcweaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package services

import (
	"context"
	"errors"
	"eu_deployment/pkg/model"
	"github.com/XCWeaver/xcweaver"
	"github.com/XCWeaver/xcweaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:           "eu_deployment/pkg/services/ComposePostService",
		Iface:          reflect.TypeOf((*ComposePostService)(nil)).Elem(),
		Impl:           reflect.TypeOf(composePostService{}),
		AntipodeAgents: []string{"rabbitClientCompose", "rabbitClientUpdate"},
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return composePostService_local_stub{impl: impl.(ComposePostService), tracer: tracer, uploadCreatorMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/ComposePostService", Method: "UploadCreator", Remote: false}), uploadMediaMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/ComposePostService", Method: "UploadMedia", Remote: false}), uploadTextMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/ComposePostService", Method: "UploadText", Remote: false}), uploadUniqueIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/ComposePostService", Method: "UploadUniqueId", Remote: false}), uploadUrlsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/ComposePostService", Method: "UploadUrls", Remote: false}), uploadUserMentionsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/ComposePostService", Method: "UploadUserMentions", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return composePostService_client_stub{stub: stub, uploadCreatorMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/ComposePostService", Method: "UploadCreator", Remote: true}), uploadMediaMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/ComposePostService", Method: "UploadMedia", Remote: true}), uploadTextMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/ComposePostService", Method: "UploadText", Remote: true}), uploadUniqueIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/ComposePostService", Method: "UploadUniqueId", Remote: true}), uploadUrlsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/ComposePostService", Method: "UploadUrls", Remote: true}), uploadUserMentionsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/ComposePostService", Method: "UploadUserMentions", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return composePostService_server_stub{impl: impl.(ComposePostService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return composePostService_reflect_stub{caller: caller}
		},
		RefData: "⟦950ace9d:wEaVeReDgE:eu_deployment/pkg/services/ComposePostService→eu_deployment/pkg/services/PostStorageService⟧\n⟦ab544543:wEaVeReDgE:eu_deployment/pkg/services/ComposePostService→eu_deployment/pkg/services/UserTimelineService⟧\n⟦4a624976:wEaVeRaNtIpOdEaGeNtS:eu_deployment/pkg/services/ComposePostService→rabbitClientCompose,rabbitClientUpdate⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "eu_deployment/pkg/services/HomeTimelineService",
		Iface: reflect.TypeOf((*HomeTimelineService)(nil)).Elem(),
		Impl:  reflect.TypeOf(homeTimelineService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return homeTimelineService_local_stub{impl: impl.(HomeTimelineService), tracer: tracer, readHomeTimelineMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/HomeTimelineService", Method: "ReadHomeTimeline", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return homeTimelineService_client_stub{stub: stub, readHomeTimelineMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/HomeTimelineService", Method: "ReadHomeTimeline", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return homeTimelineService_server_stub{impl: impl.(HomeTimelineService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return homeTimelineService_reflect_stub{caller: caller}
		},
		RefData: "⟦a98bf044:wEaVeReDgE:eu_deployment/pkg/services/HomeTimelineService→eu_deployment/pkg/services/PostStorageService⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "eu_deployment/pkg/services/MediaService",
		Iface: reflect.TypeOf((*MediaService)(nil)).Elem(),
		Impl:  reflect.TypeOf(mediaService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return mediaService_local_stub{impl: impl.(MediaService), tracer: tracer, uploadMediaMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/MediaService", Method: "UploadMedia", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return mediaService_client_stub{stub: stub, uploadMediaMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/MediaService", Method: "UploadMedia", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return mediaService_server_stub{impl: impl.(MediaService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return mediaService_reflect_stub{caller: caller}
		},
		RefData: "⟦48b966b4:wEaVeReDgE:eu_deployment/pkg/services/MediaService→eu_deployment/pkg/services/ComposePostService⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:           "eu_deployment/pkg/services/PostStorageService",
		Iface:          reflect.TypeOf((*PostStorageService)(nil)).Elem(),
		Impl:           reflect.TypeOf(postStorageService{}),
		AntipodeAgents: []string{"mongoClientPostStorage"},
		NoRetry:        []int{2},
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return postStorageService_local_stub{impl: impl.(PostStorageService), tracer: tracer, readPostMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/PostStorageService", Method: "ReadPost", Remote: false}), readPostsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/PostStorageService", Method: "ReadPosts", Remote: false}), storePostMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/PostStorageService", Method: "StorePost", Remote: false}), updatePostMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/PostStorageService", Method: "UpdatePost", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return postStorageService_client_stub{stub: stub, readPostMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/PostStorageService", Method: "ReadPost", Remote: true}), readPostsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/PostStorageService", Method: "ReadPosts", Remote: true}), storePostMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/PostStorageService", Method: "StorePost", Remote: true}), updatePostMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/PostStorageService", Method: "UpdatePost", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return postStorageService_server_stub{impl: impl.(PostStorageService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return postStorageService_reflect_stub{caller: caller}
		},
		RefData: "⟦0a360bd6:wEaVeRaNtIpOdEaGeNtS:eu_deployment/pkg/services/PostStorageService→mongoClientPostStorage⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "eu_deployment/pkg/services/SocialGraphService",
		Iface: reflect.TypeOf((*SocialGraphService)(nil)).Elem(),
		Impl:  reflect.TypeOf(socialGraphService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return socialGraphService_local_stub{impl: impl.(SocialGraphService), tracer: tracer, followMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/SocialGraphService", Method: "Follow", Remote: false}), followWithUsernameMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/SocialGraphService", Method: "FollowWithUsername", Remote: false}), getFolloweesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/SocialGraphService", Method: "GetFollowees", Remote: false}), getFollowersMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/SocialGraphService", Method: "GetFollowers", Remote: false}), insertUserMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/SocialGraphService", Method: "InsertUser", Remote: false}), unfollowMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/SocialGraphService", Method: "Unfollow", Remote: false}), unfollowWithUsernameMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/SocialGraphService", Method: "UnfollowWithUsername", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return socialGraphService_client_stub{stub: stub, followMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/SocialGraphService", Method: "Follow", Remote: true}), followWithUsernameMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/SocialGraphService", Method: "FollowWithUsername", Remote: true}), getFolloweesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/SocialGraphService", Method: "GetFollowees", Remote: true}), getFollowersMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/SocialGraphService", Method: "GetFollowers", Remote: true}), insertUserMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/SocialGraphService", Method: "InsertUser", Remote: true}), unfollowMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/SocialGraphService", Method: "Unfollow", Remote: true}), unfollowWithUsernameMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/SocialGraphService", Method: "UnfollowWithUsername", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return socialGraphService_server_stub{impl: impl.(SocialGraphService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return socialGraphService_reflect_stub{caller: caller}
		},
		RefData: "⟦eae22736:wEaVeReDgE:eu_deployment/pkg/services/SocialGraphService→eu_deployment/pkg/services/UserService⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "eu_deployment/pkg/services/TextService",
		Iface: reflect.TypeOf((*TextService)(nil)).Elem(),
		Impl:  reflect.TypeOf(textService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return textService_local_stub{impl: impl.(TextService), tracer: tracer, uploadTextMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/TextService", Method: "UploadText", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return textService_client_stub{stub: stub, uploadTextMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/TextService", Method: "UploadText", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return textService_server_stub{impl: impl.(TextService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return textService_reflect_stub{caller: caller}
		},
		RefData: "⟦b4f6e084:wEaVeReDgE:eu_deployment/pkg/services/TextService→eu_deployment/pkg/services/ComposePostService⟧\n⟦af6e62b0:wEaVeReDgE:eu_deployment/pkg/services/TextService→eu_deployment/pkg/services/UrlShortenService⟧\n⟦ffc38b8d:wEaVeReDgE:eu_deployment/pkg/services/TextService→eu_deployment/pkg/services/UserMentionService⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "eu_deployment/pkg/services/UniqueIdService",
		Iface: reflect.TypeOf((*UniqueIdService)(nil)).Elem(),
		Impl:  reflect.TypeOf(uniqueIdService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return uniqueIdService_local_stub{impl: impl.(UniqueIdService), tracer: tracer, uploadUniqueIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UniqueIdService", Method: "UploadUniqueId", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return uniqueIdService_client_stub{stub: stub, uploadUniqueIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UniqueIdService", Method: "UploadUniqueId", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return uniqueIdService_server_stub{impl: impl.(UniqueIdService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return uniqueIdService_reflect_stub{caller: caller}
		},
		RefData: "⟦bd6acdef:wEaVeReDgE:eu_deployment/pkg/services/UniqueIdService→eu_deployment/pkg/services/ComposePostService⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "eu_deployment/pkg/services/UrlShortenService",
		Iface: reflect.TypeOf((*UrlShortenService)(nil)).Elem(),
		Impl:  reflect.TypeOf(urlShortenService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return urlShortenService_local_stub{impl: impl.(UrlShortenService), tracer: tracer, getExtendedUrlsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UrlShortenService", Method: "GetExtendedUrls", Remote: false}), uploadUrlsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UrlShortenService", Method: "UploadUrls", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return urlShortenService_client_stub{stub: stub, getExtendedUrlsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UrlShortenService", Method: "GetExtendedUrls", Remote: true}), uploadUrlsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UrlShortenService", Method: "UploadUrls", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return urlShortenService_server_stub{impl: impl.(UrlShortenService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return urlShortenService_reflect_stub{caller: caller}
		},
		RefData: "⟦427339d6:wEaVeReDgE:eu_deployment/pkg/services/UrlShortenService→eu_deployment/pkg/services/ComposePostService⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "eu_deployment/pkg/services/UserMentionService",
		Iface: reflect.TypeOf((*UserMentionService)(nil)).Elem(),
		Impl:  reflect.TypeOf(userMentionService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return userMentionService_local_stub{impl: impl.(UserMentionService), tracer: tracer, uploadUserMentionsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserMentionService", Method: "UploadUserMentions", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return userMentionService_client_stub{stub: stub, uploadUserMentionsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserMentionService", Method: "UploadUserMentions", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return userMentionService_server_stub{impl: impl.(UserMentionService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return userMentionService_reflect_stub{caller: caller}
		},
		RefData: "⟦3f5e4274:wEaVeReDgE:eu_deployment/pkg/services/UserMentionService→eu_deployment/pkg/services/ComposePostService⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "eu_deployment/pkg/services/UserService",
		Iface: reflect.TypeOf((*UserService)(nil)).Elem(),
		Impl:  reflect.TypeOf(userService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return userService_local_stub{impl: impl.(UserService), tracer: tracer, getUserIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserService", Method: "GetUserId", Remote: false}), loginMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserService", Method: "Login", Remote: false}), registerUserMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserService", Method: "RegisterUser", Remote: false}), registerUserWithIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserService", Method: "RegisterUserWithId", Remote: false}), uploadCreatorWithUserIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserService", Method: "UploadCreatorWithUserId", Remote: false}), uploadCreatorWithUsernameMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserService", Method: "UploadCreatorWithUsername", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return userService_client_stub{stub: stub, getUserIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserService", Method: "GetUserId", Remote: true}), loginMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserService", Method: "Login", Remote: true}), registerUserMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserService", Method: "RegisterUser", Remote: true}), registerUserWithIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserService", Method: "RegisterUserWithId", Remote: true}), uploadCreatorWithUserIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserService", Method: "UploadCreatorWithUserId", Remote: true}), uploadCreatorWithUsernameMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserService", Method: "UploadCreatorWithUsername", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return userService_server_stub{impl: impl.(UserService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return userService_reflect_stub{caller: caller}
		},
		RefData: "⟦b9cab1c9:wEaVeReDgE:eu_deployment/pkg/services/UserService→eu_deployment/pkg/services/SocialGraphService⟧\n⟦e5dc2a8d:wEaVeReDgE:eu_deployment/pkg/services/UserService→eu_deployment/pkg/services/ComposePostService⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "eu_deployment/pkg/services/UserTimelineService",
		Iface: reflect.TypeOf((*UserTimelineService)(nil)).Elem(),
		Impl:  reflect.TypeOf(userTimelineService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return userTimelineService_local_stub{impl: impl.(UserTimelineService), tracer: tracer, readUserTimelineMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserTimelineService", Method: "ReadUserTimeline", Remote: false}), writeUserTimelineMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserTimelineService", Method: "WriteUserTimeline", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return userTimelineService_client_stub{stub: stub, readUserTimelineMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserTimelineService", Method: "ReadUserTimeline", Remote: true}), writeUserTimelineMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/pkg/services/UserTimelineService", Method: "WriteUserTimeline", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return userTimelineService_server_stub{impl: impl.(UserTimelineService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return userTimelineService_reflect_stub{caller: caller}
		},
		RefData: "⟦54c57cc2:wEaVeReDgE:eu_deployment/pkg/services/UserTimelineService→eu_deployment/pkg/services/PostStorageService⟧\n",
	})
}

// xcweaver.InstanceOf checks.
var _ xcweaver.InstanceOf[ComposePostService] = (*composePostService)(nil)
var _ xcweaver.InstanceOf[HomeTimelineService] = (*homeTimelineService)(nil)
var _ xcweaver.InstanceOf[MediaService] = (*mediaService)(nil)
var _ xcweaver.InstanceOf[PostStorageService] = (*postStorageService)(nil)
var _ xcweaver.InstanceOf[SocialGraphService] = (*socialGraphService)(nil)
var _ xcweaver.InstanceOf[TextService] = (*textService)(nil)
var _ xcweaver.InstanceOf[UniqueIdService] = (*uniqueIdService)(nil)
var _ xcweaver.InstanceOf[UrlShortenService] = (*urlShortenService)(nil)
var _ xcweaver.InstanceOf[UserMentionService] = (*userMentionService)(nil)
var _ xcweaver.InstanceOf[UserService] = (*userService)(nil)
var _ xcweaver.InstanceOf[UserTimelineService] = (*userTimelineService)(nil)

// xcweaver.Router checks.
var _ xcweaver.Unrouted = (*composePostService)(nil)
var _ xcweaver.Unrouted = (*homeTimelineService)(nil)
var _ xcweaver.Unrouted = (*mediaService)(nil)
var _ xcweaver.Unrouted = (*postStorageService)(nil)
var _ xcweaver.Unrouted = (*socialGraphService)(nil)
var _ xcweaver.Unrouted = (*textService)(nil)
var _ xcweaver.Unrouted = (*uniqueIdService)(nil)
var _ xcweaver.Unrouted = (*urlShortenService)(nil)
var _ xcweaver.Unrouted = (*userMentionService)(nil)
var _ xcweaver.Unrouted = (*userService)(nil)
var _ xcweaver.Unrouted = (*userTimelineService)(nil)

// Local stub implementations.

type composePostService_local_stub struct {
	impl                      ComposePostService
	tracer                    trace.Tracer
	uploadCreatorMetrics      *codegen.MethodMetrics
	uploadMediaMetrics        *codegen.MethodMetrics
	uploadTextMetrics         *codegen.MethodMetrics
	uploadUniqueIdMetrics     *codegen.MethodMetrics
	uploadUrlsMetrics         *codegen.MethodMetrics
	uploadUserMentionsMetrics *codegen.MethodMetrics
}

// Check that composePostService_local_stub implements the ComposePostService interface.
var _ ComposePostService = (*composePostService_local_stub)(nil)

func (s composePostService_local_stub) UploadCreator(ctx context.Context, a0 int64, a1 model.Creator, a2 bool) (err error) {
	// Update metrics.
	begin := s.uploadCreatorMetrics.Begin()
	defer func() { s.uploadCreatorMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.ComposePostService.UploadCreator", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UploadCreator(ctx, a0, a1, a2)
}

func (s composePostService_local_stub) UploadMedia(ctx context.Context, a0 int64, a1 []model.Media, a2 bool) (err error) {
	// Update metrics.
	begin := s.uploadMediaMetrics.Begin()
	defer func() { s.uploadMediaMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.ComposePostService.UploadMedia", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UploadMedia(ctx, a0, a1, a2)
}

func (s composePostService_local_stub) UploadText(ctx context.Context, a0 int64, a1 string, a2 bool) (err error) {
	// Update metrics.
	begin := s.uploadTextMetrics.Begin()
	defer func() { s.uploadTextMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.ComposePostService.UploadText", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UploadText(ctx, a0, a1, a2)
}

func (s composePostService_local_stub) UploadUniqueId(ctx context.Context, a0 int64, a1 string, a2 model.PostType, a3 bool) (err error) {
	// Update metrics.
	begin := s.uploadUniqueIdMetrics.Begin()
	defer func() { s.uploadUniqueIdMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.ComposePostService.UploadUniqueId", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UploadUniqueId(ctx, a0, a1, a2, a3)
}

func (s composePostService_local_stub) UploadUrls(ctx context.Context, a0 int64, a1 []model.URL, a2 bool) (err error) {
	// Update metrics.
	begin := s.uploadUrlsMetrics.Begin()
	defer func() { s.uploadUrlsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.ComposePostService.UploadUrls", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UploadUrls(ctx, a0, a1, a2)
}

func (s composePostService_local_stub) UploadUserMentions(ctx context.Context, a0 int64, a1 []model.UserMention, a2 bool) (err error) {
	// Update metrics.
	begin := s.uploadUserMentionsMetrics.Begin()
	defer func() { s.uploadUserMentionsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.ComposePostService.UploadUserMentions", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UploadUserMentions(ctx, a0, a1, a2)
}

type homeTimelineService_local_stub struct {
	impl                    HomeTimelineService
	tracer                  trace.Tracer
	readHomeTimelineMetrics *codegen.MethodMetrics
}

// Check that homeTimelineService_local_stub implements the HomeTimelineService interface.
var _ HomeTimelineService = (*homeTimelineService_local_stub)(nil)

func (s homeTimelineService_local_stub) ReadHomeTimeline(ctx context.Context, a0 int64, a1 string, a2 int64, a3 int64) (r0 []model.Post, err error) {
	// Update metrics.
	begin := s.readHomeTimelineMetrics.Begin()
	defer func() { s.readHomeTimelineMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.HomeTimelineService.ReadHomeTimeline", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ReadHomeTimeline(ctx, a0, a1, a2, a3)
}

type mediaService_local_stub struct {
	impl               MediaService
	tracer             trace.Tracer
	uploadMediaMetrics *codegen.MethodMetrics
}

// Check that mediaService_local_stub implements the MediaService interface.
var _ MediaService = (*mediaService_local_stub)(nil)

func (s mediaService_local_stub) UploadMedia(ctx context.Context, a0 int64, a1 []string, a2 []int64, a3 bool) (err error) {
	// Update metrics.
	begin := s.uploadMediaMetrics.Begin()
	defer func() { s.uploadMediaMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.MediaService.UploadMedia", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UploadMedia(ctx, a0, a1, a2, a3)
}

type postStorageService_local_stub struct {
	impl              PostStorageService
	tracer            trace.Tracer
	readPostMetrics   *codegen.MethodMetrics
	readPostsMetrics  *codegen.MethodMetrics
	storePostMetrics  *codegen.MethodMetrics
	updatePostMetrics *codegen.MethodMetrics
}

// Check that postStorageService_local_stub implements the PostStorageService interface.
var _ PostStorageService = (*postStorageService_local_stub)(nil)

func (s postStorageService_local_stub) ReadPost(ctx context.Context, a0 int64, a1 string) (r0 model.Post, err error) {
	// Update metrics.
	begin := s.readPostMetrics.Begin()
	defer func() { s.readPostMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.PostStorageService.ReadPost", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ReadPost(ctx, a0, a1)
}

func (s postStorageService_local_stub) ReadPosts(ctx context.Context, a0 int64, a1 []string) (r0 []model.Post, err error) {
	// Update metrics.
	begin := s.readPostsMetrics.Begin()
	defer func() { s.readPostsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.PostStorageService.ReadPosts", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ReadPosts(ctx, a0, a1)
}

func (s postStorageService_local_stub) StorePost(ctx context.Context, a0 int64, a1 model.Post) (r0 []byte, err error) {
	// Update metrics.
	begin := s.storePostMetrics.Begin()
	defer func() { s.storePostMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.PostStorageService.StorePost", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.StorePost(ctx, a0, a1)
}

func (s postStorageService_local_stub) UpdatePost(ctx context.Context, a0 int64, a1 model.Post) (r0 []byte, err error) {
	// Update metrics.
	begin := s.updatePostMetrics.Begin()
	defer func() { s.updatePostMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.PostStorageService.UpdatePost", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UpdatePost(ctx, a0, a1)
}

type socialGraphService_local_stub struct {
	impl                        SocialGraphService
	tracer                      trace.Tracer
	followMetrics               *codegen.MethodMetrics
	followWithUsernameMetrics   *codegen.MethodMetrics
	getFolloweesMetrics         *codegen.MethodMetrics
	getFollowersMetrics         *codegen.MethodMetrics
	insertUserMetrics           *codegen.MethodMetrics
	unfollowMetrics             *codegen.MethodMetrics
	unfollowWithUsernameMetrics *codegen.MethodMetrics
}

// Check that socialGraphService_local_stub implements the SocialGraphService interface.
var _ SocialGraphService = (*socialGraphService_local_stub)(nil)

func (s socialGraphService_local_stub) Follow(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	begin := s.followMetrics.Begin()
	defer func() { s.followMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.SocialGraphService.Follow", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Follow(ctx, a0, a1, a2)
}

func (s socialGraphService_local_stub) FollowWithUsername(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	begin := s.followWithUsernameMetrics.Begin()
	defer func() { s.followWithUsernameMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.SocialGraphService.FollowWithUsername", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.FollowWithUsername(ctx, a0, a1, a2)
}

func (s socialGraphService_local_stub) GetFollowees(ctx context.Context, a0 int64, a1 string) (r0 []string, err error) {
	// Update metrics.
	begin := s.getFolloweesMetrics.Begin()
	defer func() { s.getFolloweesMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.SocialGraphService.GetFollowees", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetFollowees(ctx, a0, a1)
}

func (s socialGraphService_local_stub) GetFollowers(ctx context.Context, a0 int64, a1 string) (r0 []string, err error) {
	// Update metrics.
	begin := s.getFollowersMetrics.Begin()
	defer func() { s.getFollowersMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.SocialGraphService.GetFollowers", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetFollowers(ctx, a0, a1)
}

func (s socialGraphService_local_stub) InsertUser(ctx context.Context, a0 int64, a1 string) (err error) {
	// Update metrics.
	begin := s.insertUserMetrics.Begin()
	defer func() { s.insertUserMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.SocialGraphService.InsertUser", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.InsertUser(ctx, a0, a1)
}

func (s socialGraphService_local_stub) Unfollow(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	begin := s.unfollowMetrics.Begin()
	defer func() { s.unfollowMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.SocialGraphService.Unfollow", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Unfollow(ctx, a0, a1, a2)
}

func (s socialGraphService_local_stub) UnfollowWithUsername(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	begin := s.unfollowWithUsernameMetrics.Begin()
	defer func() { s.unfollowWithUsernameMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.SocialGraphService.UnfollowWithUsername", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UnfollowWithUsername(ctx, a0, a1, a2)
}

type textService_local_stub struct {
	impl              TextService
	tracer            trace.Tracer
	uploadTextMetrics *codegen.MethodMetrics
}

// Check that textService_local_stub implements the TextService interface.
var _ TextService = (*textService_local_stub)(nil)

func (s textService_local_stub) UploadText(ctx context.Context, a0 int64, a1 string, a2 bool) (err error) {
	// Update metrics.
	begin := s.uploadTextMetrics.Begin()
	defer func() { s.uploadTextMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.TextService.UploadText", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UploadText(ctx, a0, a1, a2)
}

type uniqueIdService_local_stub struct {
	impl                  UniqueIdService
	tracer                trace.Tracer
	uploadUniqueIdMetrics *codegen.MethodMetrics
}

// Check that uniqueIdService_local_stub implements the UniqueIdService interface.
var _ UniqueIdService = (*uniqueIdService_local_stub)(nil)

func (s uniqueIdService_local_stub) UploadUniqueId(ctx context.Context, a0 int64, a1 model.PostType, a2 string) (r0 string, err error) {
	// Update metrics.
	begin := s.uploadUniqueIdMetrics.Begin()
	defer func() { s.uploadUniqueIdMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UniqueIdService.UploadUniqueId", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UploadUniqueId(ctx, a0, a1, a2)
}

type urlShortenService_local_stub struct {
	impl                   UrlShortenService
	tracer                 trace.Tracer
	getExtendedUrlsMetrics *codegen.MethodMetrics
	uploadUrlsMetrics      *codegen.MethodMetrics
}

// Check that urlShortenService_local_stub implements the UrlShortenService interface.
var _ UrlShortenService = (*urlShortenService_local_stub)(nil)

func (s urlShortenService_local_stub) GetExtendedUrls(ctx context.Context, a0 int64, a1 []string) (r0 []string, err error) {
	// Update metrics.
	begin := s.getExtendedUrlsMetrics.Begin()
	defer func() { s.getExtendedUrlsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UrlShortenService.GetExtendedUrls", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetExtendedUrls(ctx, a0, a1)
}

func (s urlShortenService_local_stub) UploadUrls(ctx context.Context, a0 int64, a1 []string, a2 bool) (err error) {
	// Update metrics.
	begin := s.uploadUrlsMetrics.Begin()
	defer func() { s.uploadUrlsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UrlShortenService.UploadUrls", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UploadUrls(ctx, a0, a1, a2)
}

type userMentionService_local_stub struct {
	impl                      UserMentionService
	tracer                    trace.Tracer
	uploadUserMentionsMetrics *codegen.MethodMetrics
}

// Check that userMentionService_local_stub implements the UserMentionService interface.
var _ UserMentionService = (*userMentionService_local_stub)(nil)

func (s userMentionService_local_stub) UploadUserMentions(ctx context.Context, a0 int64, a1 []string, a2 bool) (err error) {
	// Update metrics.
	begin := s.uploadUserMentionsMetrics.Begin()
	defer func() { s.uploadUserMentionsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UserMentionService.UploadUserMentions", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UploadUserMentions(ctx, a0, a1, a2)
}

type userService_local_stub struct {
	impl                             UserService
	tracer                           trace.Tracer
	getUserIdMetrics                 *codegen.MethodMetrics
	loginMetrics                     *codegen.MethodMetrics
	registerUserMetrics              *codegen.MethodMetrics
	registerUserWithIdMetrics        *codegen.MethodMetrics
	uploadCreatorWithUserIdMetrics   *codegen.MethodMetrics
	uploadCreatorWithUsernameMetrics *codegen.MethodMetrics
}

// Check that userService_local_stub implements the UserService interface.
var _ UserService = (*userService_local_stub)(nil)

func (s userService_local_stub) GetUserId(ctx context.Context, a0 int64, a1 string) (r0 string, err error) {
	// Update metrics.
	begin := s.getUserIdMetrics.Begin()
	defer func() { s.getUserIdMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UserService.GetUserId", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetUserId(ctx, a0, a1)
}

func (s userService_local_stub) Login(ctx context.Context, a0 int64, a1 string, a2 string) (r0 string, err error) {
	// Update metrics.
	begin := s.loginMetrics.Begin()
	defer func() { s.loginMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UserService.Login", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Login(ctx, a0, a1, a2)
}

func (s userService_local_stub) RegisterUser(ctx context.Context, a0 int64, a1 string, a2 string, a3 string, a4 string) (err error) {
	// Update metrics.
	begin := s.registerUserMetrics.Begin()
	defer func() { s.registerUserMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UserService.RegisterUser", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.RegisterUser(ctx, a0, a1, a2, a3, a4)
}

func (s userService_local_stub) RegisterUserWithId(ctx context.Context, a0 int64, a1 string, a2 string, a3 string, a4 string, a5 string) (err error) {
	// Update metrics.
	begin := s.registerUserWithIdMetrics.Begin()
	defer func() { s.registerUserWithIdMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UserService.RegisterUserWithId", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.RegisterUserWithId(ctx, a0, a1, a2, a3, a4, a5)
}

func (s userService_local_stub) UploadCreatorWithUserId(ctx context.Context, a0 int64, a1 string, a2 string, a3 bool) (err error) {
	// Update metrics.
	begin := s.uploadCreatorWithUserIdMetrics.Begin()
	defer func() { s.uploadCreatorWithUserIdMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UserService.UploadCreatorWithUserId", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UploadCreatorWithUserId(ctx, a0, a1, a2, a3)
}

func (s userService_local_stub) UploadCreatorWithUsername(ctx context.Context, a0 int64, a1 string, a2 bool) (err error) {
	// Update metrics.
	begin := s.uploadCreatorWithUsernameMetrics.Begin()
	defer func() { s.uploadCreatorWithUsernameMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UserService.UploadCreatorWithUsername", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UploadCreatorWithUsername(ctx, a0, a1, a2)
}

type userTimelineService_local_stub struct {
	impl                     UserTimelineService
	tracer                   trace.Tracer
	readUserTimelineMetrics  *codegen.MethodMetrics
	writeUserTimelineMetrics *codegen.MethodMetrics
}

// Check that userTimelineService_local_stub implements the UserTimelineService interface.
var _ UserTimelineService = (*userTimelineService_local_stub)(nil)

func (s userTimelineService_local_stub) ReadUserTimeline(ctx context.Context, a0 int64, a1 string, a2 int64, a3 int64) (r0 []model.Post, err error) {
	// Update metrics.
	begin := s.readUserTimelineMetrics.Begin()
	defer func() { s.readUserTimelineMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UserTimelineService.ReadUserTimeline", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ReadUserTimeline(ctx, a0, a1, a2, a3)
}

func (s userTimelineService_local_stub) WriteUserTimeline(ctx context.Context, a0 int64, a1 string, a2 string, a3 int64) (err error) {
	// Update metrics.
	begin := s.writeUserTimelineMetrics.Begin()
	defer func() { s.writeUserTimelineMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UserTimelineService.WriteUserTimeline", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.WriteUserTimeline(ctx, a0, a1, a2, a3)
}

// Client stub implementations.

type composePostService_client_stub struct {
	stub                      codegen.Stub
	uploadCreatorMetrics      *codegen.MethodMetrics
	uploadMediaMetrics        *codegen.MethodMetrics
	uploadTextMetrics         *codegen.MethodMetrics
	uploadUniqueIdMetrics     *codegen.MethodMetrics
	uploadUrlsMetrics         *codegen.MethodMetrics
	uploadUserMentionsMetrics *codegen.MethodMetrics
}

// Check that composePostService_client_stub implements the ComposePostService interface.
var _ ComposePostService = (*composePostService_client_stub)(nil)

func (s composePostService_client_stub) UploadCreator(ctx context.Context, a0 int64, a1 model.Creator, a2 bool) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.uploadCreatorMetrics.Begin()
	defer func() { s.uploadCreatorMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.ComposePostService.UploadCreator", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Int64(a0)
	(a1).WeaverMarshal(enc)
	enc.Bool(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s composePostService_client_stub) UploadMedia(ctx context.Context, a0 int64, a1 []model.Media, a2 bool) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.uploadMediaMetrics.Begin()
	defer func() { s.uploadMediaMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.ComposePostService.UploadMedia", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Int64(a0)
	serviceweaver_enc_slice_Media_2b5ca60e(enc, a1)
	enc.Bool(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s composePostService_client_stub) UploadText(ctx context.Context, a0 int64, a1 string, a2 bool) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.uploadTextMetrics.Begin()
	defer func() { s.uploadTextMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.ComposePostService.UploadText", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += 1
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.Bool(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s composePostService_client_stub) UploadUniqueId(ctx context.Context, a0 int64, a1 string, a2 model.PostType, a3 bool) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.uploadUniqueIdMetrics.Begin()
	defer func() { s.uploadUniqueIdMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.ComposePostService.UploadUniqueId", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Int64(a0)
	enc.String(a1)
	enc.Int((int)(a2))
	enc.Bool(a3)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s composePostService_client_stub) UploadUrls(ctx context.Context, a0 int64, a1 []model.URL, a2 bool) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.uploadUrlsMetrics.Begin()
	defer func() { s.uploadUrlsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.ComposePostService.UploadUrls", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Int64(a0)
	serviceweaver_enc_slice_URL_eb8a95e1(enc, a1)
	enc.Bool(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s composePostService_client_stub) UploadUserMentions(ctx context.Context, a0 int64, a1 []model.UserMention, a2 bool) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.uploadUserMentionsMetrics.Begin()
	defer func() { s.uploadUserMentionsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.ComposePostService.UploadUserMentions", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Int64(a0)
	serviceweaver_enc_slice_UserMention_2dd696ff(enc, a1)
	enc.Bool(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 5, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type homeTimelineService_client_stub struct {
	stub                    codegen.Stub
	readHomeTimelineMetrics *codegen.MethodMetrics
}

// Check that homeTimelineService_client_stub implements the HomeTimelineService interface.
var _ HomeTimelineService = (*homeTimelineService_client_stub)(nil)

func (s homeTimelineService_client_stub) ReadHomeTimeline(ctx context.Context, a0 int64, a1 string, a2 int64, a3 int64) (r0 []model.Post, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.readHomeTimelineMetrics.Begin()
	defer func() { s.readHomeTimelineMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.HomeTimelineService.ReadHomeTimeline", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += 8
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.Int64(a2)
	enc.Int64(a3)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_Post_1f0ff041(dec)
	err = dec.Error()
	return
}

type mediaService_client_stub struct {
	stub               codegen.Stub
	uploadMediaMetrics *codegen.MethodMetrics
}

// Check that mediaService_client_stub implements the MediaService interface.
var _ MediaService = (*mediaService_client_stub)(nil)

func (s mediaService_client_stub) UploadMedia(ctx context.Context, a0 int64, a1 []string, a2 []int64, a3 bool) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.uploadMediaMetrics.Begin()
	defer func() { s.uploadMediaMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.MediaService.UploadMedia", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Int64(a0)
	serviceweaver_enc_slice_string_4af10117(enc, a1)
	serviceweaver_enc_slice_int64_a8f7f092(enc, a2)
	enc.Bool(a3)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type postStorageService_client_stub struct {
	stub              codegen.Stub
	readPostMetrics   *codegen.MethodMetrics
	readPostsMetrics  *codegen.MethodMetrics
	storePostMetrics  *codegen.MethodMetrics
	updatePostMetrics *codegen.MethodMetrics
}

// Check that postStorageService_client_stub implements the PostStorageService interface.
var _ PostStorageService = (*postStorageService_client_stub)(nil)

func (s postStorageService_client_stub) ReadPost(ctx context.Context, a0 int64, a1 string) (r0 model.Post, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.readPostMetrics.Begin()
	defer func() { s.readPostMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.PostStorageService.ReadPost", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

func (s postStorageService_client_stub) ReadPosts(ctx context.Context, a0 int64, a1 []string) (r0 []model.Post, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.readPostsMetrics.Begin()
	defer func() { s.readPostsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.PostStorageService.ReadPosts", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Int64(a0)
	serviceweaver_enc_slice_string_4af10117(enc, a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_Post_1f0ff041(dec)
	err = dec.Error()
	return
}

func (s postStorageService_client_stub) StorePost(ctx context.Context, a0 int64, a1 model.Post) (r0 []byte, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.storePostMetrics.Begin()
	defer func() { s.storePostMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.PostStorageService.StorePost", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Int64(a0)
	(a1).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_byte_87461245(dec)
	err = dec.Error()
	return
}

func (s postStorageService_client_stub) UpdatePost(ctx context.Context, a0 int64, a1 model.Post) (r0 []byte, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.updatePostMetrics.Begin()
	defer func() { s.updatePostMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.PostStorageService.UpdatePost", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Int64(a0)
	(a1).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_byte_87461245(dec)
	err = dec.Error()
	return
}

type socialGraphService_client_stub struct {
	stub                        codegen.Stub
	followMetrics               *codegen.MethodMetrics
	followWithUsernameMetrics   *codegen.MethodMetrics
	getFolloweesMetrics         *codegen.MethodMetrics
	getFollowersMetrics         *codegen.MethodMetrics
	insertUserMetrics           *codegen.MethodMetrics
	unfollowMetrics             *codegen.MethodMetrics
	unfollowWithUsernameMetrics *codegen.MethodMetrics
}

// Check that socialGraphService_client_stub implements the SocialGraphService interface.
var _ SocialGraphService = (*socialGraphService_client_stub)(nil)

func (s socialGraphService_client_stub) Follow(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.followMetrics.Begin()
	defer func() { s.followMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.SocialGraphService.Follow", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s socialGraphService_client_stub) FollowWithUsername(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.followWithUsernameMetrics.Begin()
	defer func() { s.followWithUsernameMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.SocialGraphService.FollowWithUsername", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s socialGraphService_client_stub) GetFollowees(ctx context.Context, a0 int64, a1 string) (r0 []string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getFolloweesMetrics.Begin()
	defer func() { s.getFolloweesMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.SocialGraphService.GetFollowees", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_string_4af10117(dec)
	err = dec.Error()
	return
}

func (s socialGraphService_client_stub) GetFollowers(ctx context.Context, a0 int64, a1 string) (r0 []string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getFollowersMetrics.Begin()
	defer func() { s.getFollowersMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.SocialGraphService.GetFollowers", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_string_4af10117(dec)
	err = dec.Error()
	return
}

func (s socialGraphService_client_stub) InsertUser(ctx context.Context, a0 int64, a1 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.insertUserMetrics.Begin()
	defer func() { s.insertUserMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.SocialGraphService.InsertUser", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s socialGraphService_client_stub) Unfollow(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.unfollowMetrics.Begin()
	defer func() { s.unfollowMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.SocialGraphService.Unfollow", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 5, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s socialGraphService_client_stub) UnfollowWithUsername(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.unfollowWithUsernameMetrics.Begin()
	defer func() { s.unfollowWithUsernameMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.SocialGraphService.UnfollowWithUsername", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 6, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type textService_client_stub struct {
	stub              codegen.Stub
	uploadTextMetrics *codegen.MethodMetrics
}

// Check that textService_client_stub implements the TextService interface.
var _ TextService = (*textService_client_stub)(nil)

func (s textService_client_stub) UploadText(ctx context.Context, a0 int64, a1 string, a2 bool) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.uploadTextMetrics.Begin()
	defer func() { s.uploadTextMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.TextService.UploadText", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += 1
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.Bool(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type uniqueIdService_client_stub struct {
	stub                  codegen.Stub
	uploadUniqueIdMetrics *codegen.MethodMetrics
}

// Check that uniqueIdService_client_stub implements the UniqueIdService interface.
var _ UniqueIdService = (*uniqueIdService_client_stub)(nil)

func (s uniqueIdService_client_stub) UploadUniqueId(ctx context.Context, a0 int64, a1 model.PostType, a2 string) (r0 string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.uploadUniqueIdMetrics.Begin()
	defer func() { s.uploadUniqueIdMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UniqueIdService.UploadUniqueId", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Int64(a0)
	enc.Int((int)(a1))
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.String()
	err = dec.Error()
	return
}

type urlShortenService_client_stub struct {
	stub                   codegen.Stub
	getExtendedUrlsMetrics *codegen.MethodMetrics
	uploadUrlsMetrics      *codegen.MethodMetrics
}

// Check that urlShortenService_client_stub implements the UrlShortenService interface.
var _ UrlShortenService = (*urlShortenService_client_stub)(nil)

func (s urlShortenService_client_stub) GetExtendedUrls(ctx context.Context, a0 int64, a1 []string) (r0 []string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getExtendedUrlsMetrics.Begin()
	defer func() { s.getExtendedUrlsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UrlShortenService.GetExtendedUrls", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Int64(a0)
	serviceweaver_enc_slice_string_4af10117(enc, a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_string_4af10117(dec)
	err = dec.Error()
	return
}

func (s urlShortenService_client_stub) UploadUrls(ctx context.Context, a0 int64, a1 []string, a2 bool) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.uploadUrlsMetrics.Begin()
	defer func() { s.uploadUrlsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UrlShortenService.UploadUrls", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Int64(a0)
	serviceweaver_enc_slice_string_4af10117(enc, a1)
	enc.Bool(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type userMentionService_client_stub struct {
	stub                      codegen.Stub
	uploadUserMentionsMetrics *codegen.MethodMetrics
}

// Check that userMentionService_client_stub implements the UserMentionService interface.
var _ UserMentionService = (*userMentionService_client_stub)(nil)

func (s userMentionService_client_stub) UploadUserMentions(ctx context.Context, a0 int64, a1 []string, a2 bool) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.uploadUserMentionsMetrics.Begin()
	defer func() { s.uploadUserMentionsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UserMentionService.UploadUserMentions", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Int64(a0)
	serviceweaver_enc_slice_string_4af10117(enc, a1)
	enc.Bool(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type userService_client_stub struct {
	stub                             codegen.Stub
	getUserIdMetrics                 *codegen.MethodMetrics
	loginMetrics                     *codegen.MethodMetrics
	registerUserMetrics              *codegen.MethodMetrics
	registerUserWithIdMetrics        *codegen.MethodMetrics
	uploadCreatorWithUserIdMetrics   *codegen.MethodMetrics
	uploadCreatorWithUsernameMetrics *codegen.MethodMetrics
}

// Check that userService_client_stub implements the UserService interface.
var _ UserService = (*userService_client_stub)(nil)

func (s userService_client_stub) GetUserId(ctx context.Context, a0 int64, a1 string) (r0 string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getUserIdMetrics.Begin()
	defer func() { s.getUserIdMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UserService.GetUserId", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.String()
	err = dec.Error()
	return
}

func (s userService_client_stub) Login(ctx context.Context, a0 int64, a1 string, a2 string) (r0 string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.loginMetrics.Begin()
	defer func() { s.loginMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UserService.Login", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.String()
	err = dec.Error()
	return
}

func (s userService_client_stub) RegisterUser(ctx context.Context, a0 int64, a1 string, a2 string, a3 string, a4 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.registerUserMetrics.Begin()
	defer func() { s.registerUserMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UserService.RegisterUser", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	size += (4 + len(a3))
	size += (4 + len(a4))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	enc.String(a3)
	enc.String(a4)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s userService_client_stub) RegisterUserWithId(ctx context.Context, a0 int64, a1 string, a2 string, a3 string, a4 string, a5 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.registerUserWithIdMetrics.Begin()
	defer func() { s.registerUserWithIdMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UserService.RegisterUserWithId", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	size += (4 + len(a3))
	size += (4 + len(a4))
	size += (4 + len(a5))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	enc.String(a3)
	enc.String(a4)
	enc.String(a5)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s userService_client_stub) UploadCreatorWithUserId(ctx context.Context, a0 int64, a1 string, a2 string, a3 bool) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.uploadCreatorWithUserIdMetrics.Begin()
	defer func() { s.uploadCreatorWithUserIdMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UserService.UploadCreatorWithUserId", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	size += 1
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	enc.Bool(a3)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s userService_client_stub) UploadCreatorWithUsername(ctx context.Context, a0 int64, a1 string, a2 bool) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.uploadCreatorWithUsernameMetrics.Begin()
	defer func() { s.uploadCreatorWithUsernameMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UserService.UploadCreatorWithUsername", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += 1
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.Bool(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 5, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type userTimelineService_client_stub struct {
	stub                     codegen.Stub
	readUserTimelineMetrics  *codegen.MethodMetrics
	writeUserTimelineMetrics *codegen.MethodMetrics
}

// Check that userTimelineService_client_stub implements the UserTimelineService interface.
var _ UserTimelineService = (*userTimelineService_client_stub)(nil)

func (s userTimelineService_client_stub) ReadUserTimeline(ctx context.Context, a0 int64, a1 string, a2 int64, a3 int64) (r0 []model.Post, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.readUserTimelineMetrics.Begin()
	defer func() { s.readUserTimelineMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UserTimelineService.ReadUserTimeline", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += 8
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.Int64(a2)
	enc.Int64(a3)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_Post_1f0ff041(dec)
	err = dec.Error()
	return
}

func (s userTimelineService_client_stub) WriteUserTimeline(ctx context.Context, a0 int64, a1 string, a2 string, a3 int64) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.writeUserTimelineMetrics.Begin()
	defer func() { s.writeUserTimelineMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UserTimelineService.WriteUserTimeline", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	enc.Int64(a3)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

// Note that "xcweaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][20]struct{}](`

ERROR: You generated this file with 'xcweaver generate' v0.22.0 (codegen
version v0.20.0). The generated code is incompatible with the version of the
github.com/XCWeaver/xcweaver module that you're using. The xcweaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/XCWeaver/xcweaver

We recommend updating the xcweaver module and the 'xcweaver generate' command by
running the following.

    go get github.com/XCWeaver/xcweaver@latest
    go install github.com/XCWeaver/xcweaver/cmd/weaver@latest

Then, re-run 'xcweaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/XCWeaver/xcweaver/issues.

`)

// Server stub implementations.

type composePostService_server_stub struct {
	impl    ComposePostService
	addLoad func(key uint64, load float64)
}

// Check that composePostService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*composePostService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s composePostService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "UploadCreator":
		return s.uploadCreator
	case "UploadMedia":
		return s.uploadMedia
	case "UploadText":
		return s.uploadText
	case "UploadUniqueId":
		return s.uploadUniqueId
	case "UploadUrls":
		return s.uploadUrls
	case "UploadUserMentions":
		return s.uploadUserMentions
	default:
		return nil
	}
}

func (s composePostService_server_stub) uploadCreator(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 model.Creator
	(&a1).WeaverUnmarshal(dec)
	var a2 bool
	a2 = dec.Bool()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UploadCreator(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s composePostService_server_stub) uploadMedia(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 []model.Media
	a1 = serviceweaver_dec_slice_Media_2b5ca60e(dec)
	var a2 bool
	a2 = dec.Bool()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UploadMedia(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s composePostService_server_stub) uploadText(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 bool
	a2 = dec.Bool()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UploadText(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s composePostService_server_stub) uploadUniqueId(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 model.PostType
	*(*int)(&a2) = dec.Int()
	var a3 bool
	a3 = dec.Bool()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UploadUniqueId(ctx, a0, a1, a2, a3)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s composePostService_server_stub) uploadUrls(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 []model.URL
	a1 = serviceweaver_dec_slice_URL_eb8a95e1(dec)
	var a2 bool
	a2 = dec.Bool()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UploadUrls(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s composePostService_server_stub) uploadUserMentions(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 []model.UserMention
	a1 = serviceweaver_dec_slice_UserMention_2dd696ff(dec)
	var a2 bool
	a2 = dec.Bool()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UploadUserMentions(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type homeTimelineService_server_stub struct {
	impl    HomeTimelineService
	addLoad func(key uint64, load float64)
}

// Check that homeTimelineService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*homeTimelineService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s homeTimelineService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "ReadHomeTimeline":
		return s.readHomeTimeline
	default:
		return nil
	}
}

func (s homeTimelineService_server_stub) readHomeTimeline(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 int64
	a2 = dec.Int64()
	var a3 int64
	a3 = dec.Int64()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.ReadHomeTimeline(ctx, a0, a1, a2, a3)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_Post_1f0ff041(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

type mediaService_server_stub struct {
	impl    MediaService
	addLoad func(key uint64, load float64)
}

// Check that mediaService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*mediaService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s mediaService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "UploadMedia":
		return s.uploadMedia
	default:
		return nil
	}
}

func (s mediaService_server_stub) uploadMedia(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 []string
	a1 = serviceweaver_dec_slice_string_4af10117(dec)
	var a2 []int64
	a2 = serviceweaver_dec_slice_int64_a8f7f092(dec)
	var a3 bool
	a3 = dec.Bool()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UploadMedia(ctx, a0, a1, a2, a3)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type postStorageService_server_stub struct {
	impl    PostStorageService
	addLoad func(key uint64, load float64)
}

// Check that postStorageService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*postStorageService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s postStorageService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "ReadPost":
		return s.readPost
	case "ReadPosts":
		return s.readPosts
	case "StorePost":
		return s.storePost
	case "UpdatePost":
		return s.updatePost
	default:
		return nil
	}
}

func (s postStorageService_server_stub) readPost(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.ReadPost(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s postStorageService_server_stub) readPosts(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 []string
	a1 = serviceweaver_dec_slice_string_4af10117(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.ReadPosts(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_Post_1f0ff041(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s postStorageService_server_stub) storePost(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 model.Post
	(&a1).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.StorePost(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_byte_87461245(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s postStorageService_server_stub) updatePost(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 model.Post
	(&a1).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.UpdatePost(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_byte_87461245(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

type socialGraphService_server_stub struct {
	impl    SocialGraphService
	addLoad func(key uint64, load float64)
}

// Check that socialGraphService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*socialGraphService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s socialGraphService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Follow":
		return s.follow
	case "FollowWithUsername":
		return s.followWithUsername
	case "GetFollowees":
		return s.getFollowees
	case "GetFollowers":
		return s.getFollowers
	case "InsertUser":
		return s.insertUser
	case "Unfollow":
		return s.unfollow
	case "UnfollowWithUsername":
		return s.unfollowWithUsername
	default:
		return nil
	}
}

func (s socialGraphService_server_stub) follow(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Follow(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s socialGraphService_server_stub) followWithUsername(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.FollowWithUsername(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s socialGraphService_server_stub) getFollowees(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetFollowees(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_string_4af10117(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s socialGraphService_server_stub) getFollowers(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetFollowers(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_string_4af10117(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s socialGraphService_server_stub) insertUser(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.InsertUser(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s socialGraphService_server_stub) unfollow(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Unfollow(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s socialGraphService_server_stub) unfollowWithUsername(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UnfollowWithUsername(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type textService_server_stub struct {
	impl    TextService
	addLoad func(key uint64, load float64)
}

// Check that textService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*textService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s textService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "UploadText":
		return s.uploadText
	default:
		return nil
	}
}

func (s textService_server_stub) uploadText(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 bool
	a2 = dec.Bool()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UploadText(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type uniqueIdService_server_stub struct {
	impl    UniqueIdService
	addLoad func(key uint64, load float64)
}

// Check that uniqueIdService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*uniqueIdService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s uniqueIdService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "UploadUniqueId":
		return s.uploadUniqueId
	default:
		return nil
	}
}

func (s uniqueIdService_server_stub) uploadUniqueId(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 model.PostType
	*(*int)(&a1) = dec.Int()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.UploadUniqueId(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.String(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

type urlShortenService_server_stub struct {
	impl    UrlShortenService
	addLoad func(key uint64, load float64)
}

// Check that urlShortenService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*urlShortenService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s urlShortenService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GetExtendedUrls":
		return s.getExtendedUrls
	case "UploadUrls":
		return s.uploadUrls
	default:
		return nil
	}
}

func (s urlShortenService_server_stub) getExtendedUrls(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 []string
	a1 = serviceweaver_dec_slice_string_4af10117(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetExtendedUrls(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_string_4af10117(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s urlShortenService_server_stub) uploadUrls(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 []string
	a1 = serviceweaver_dec_slice_string_4af10117(dec)
	var a2 bool
	a2 = dec.Bool()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UploadUrls(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type userMentionService_server_stub struct {
	impl    UserMentionService
	addLoad func(key uint64, load float64)
}

// Check that userMentionService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*userMentionService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s userMentionService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "UploadUserMentions":
		return s.uploadUserMentions
	default:
		return nil
	}
}

func (s userMentionService_server_stub) uploadUserMentions(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 []string
	a1 = serviceweaver_dec_slice_string_4af10117(dec)
	var a2 bool
	a2 = dec.Bool()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UploadUserMentions(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type userService_server_stub struct {
	impl    UserService
	addLoad func(key uint64, load float64)
}

// Check that userService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*userService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s userService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GetUserId":
		return s.getUserId
	case "Login":
		return s.login
	case "RegisterUser":
		return s.registerUser
	case "RegisterUserWithId":
		return s.registerUserWithId
	case "UploadCreatorWithUserId":
		return s.uploadCreatorWithUserId
	case "UploadCreatorWithUsername":
		return s.uploadCreatorWithUsername
	default:
		return nil
	}
}

func (s userService_server_stub) getUserId(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetUserId(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.String(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s userService_server_stub) login(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Login(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.String(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s userService_server_stub) registerUser(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()
	var a3 string
	a3 = dec.String()
	var a4 string
	a4 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.RegisterUser(ctx, a0, a1, a2, a3, a4)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s userService_server_stub) registerUserWithId(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()
	var a3 string
	a3 = dec.String()
	var a4 string
	a4 = dec.String()
	var a5 string
	a5 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.RegisterUserWithId(ctx, a0, a1, a2, a3, a4, a5)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s userService_server_stub) uploadCreatorWithUserId(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()
	var a3 bool
	a3 = dec.Bool()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UploadCreatorWithUserId(ctx, a0, a1, a2, a3)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s userService_server_stub) uploadCreatorWithUsername(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 bool
	a2 = dec.Bool()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UploadCreatorWithUsername(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type userTimelineService_server_stub struct {
	impl    UserTimelineService
	addLoad func(key uint64, load float64)
}

// Check that userTimelineService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*userTimelineService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s userTimelineService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "ReadUserTimeline":
		return s.readUserTimeline
	case "WriteUserTimeline":
		return s.writeUserTimeline
	default:
		return nil
	}
}

func (s userTimelineService_server_stub) readUserTimeline(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 int64
	a2 = dec.Int64()
	var a3 int64
	a3 = dec.Int64()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.ReadUserTimeline(ctx, a0, a1, a2, a3)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_Post_1f0ff041(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s userTimelineService_server_stub) writeUserTimeline(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()
	var a3 int64
	a3 = dec.Int64()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.WriteUserTimeline(ctx, a0, a1, a2, a3)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type composePostService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that composePostService_reflect_stub implements the ComposePostService interface.
var _ ComposePostService = (*composePostService_reflect_stub)(nil)

func (s composePostService_reflect_stub) UploadCreator(ctx context.Context, a0 int64, a1 model.Creator, a2 bool) (err error) {
	err = s.caller("UploadCreator", ctx, []any{a0, a1, a2}, []any{})
	return
}

func (s composePostService_reflect_stub) UploadMedia(ctx context.Context, a0 int64, a1 []model.Media, a2 bool) (err error) {
	err = s.caller("UploadMedia", ctx, []any{a0, a1, a2}, []any{})
	return
}

func (s composePostService_reflect_stub) UploadText(ctx context.Context, a0 int64, a1 string, a2 bool) (err error) {
	err = s.caller("UploadText", ctx, []any{a0, a1, a2}, []any{})
	return
}

func (s composePostService_reflect_stub) UploadUniqueId(ctx context.Context, a0 int64, a1 string, a2 model.PostType, a3 bool) (err error) {
	err = s.caller("UploadUniqueId", ctx, []any{a0, a1, a2, a3}, []any{})
	return
}

func (s composePostService_reflect_stub) UploadUrls(ctx context.Context, a0 int64, a1 []model.URL, a2 bool) (err error) {
	err = s.caller("UploadUrls", ctx, []any{a0, a1, a2}, []any{})
	return
}

func (s composePostService_reflect_stub) UploadUserMentions(ctx context.Context, a0 int64, a1 []model.UserMention, a2 bool) (err error) {
	err = s.caller("UploadUserMentions", ctx, []any{a0, a1, a2}, []any{})
	return
}

type homeTimelineService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that homeTimelineService_reflect_stub implements the HomeTimelineService interface.
var _ HomeTimelineService = (*homeTimelineService_reflect_stub)(nil)

func (s homeTimelineService_reflect_stub) ReadHomeTimeline(ctx context.Context, a0 int64, a1 string, a2 int64, a3 int64) (r0 []model.Post, err error) {
	err = s.caller("ReadHomeTimeline", ctx, []any{a0, a1, a2, a3}, []any{&r0})
	return
}

type mediaService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that mediaService_reflect_stub implements the MediaService interface.
var _ MediaService = (*mediaService_reflect_stub)(nil)

func (s mediaService_reflect_stub) UploadMedia(ctx context.Context, a0 int64, a1 []string, a2 []int64, a3 bool) (err error) {
	err = s.caller("UploadMedia", ctx, []any{a0, a1, a2, a3}, []any{})
	return
}

type postStorageService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that postStorageService_reflect_stub implements the PostStorageService interface.
var _ PostStorageService = (*postStorageService_reflect_stub)(nil)

func (s postStorageService_reflect_stub) ReadPost(ctx context.Context, a0 int64, a1 string) (r0 model.Post, err error) {
	err = s.caller("ReadPost", ctx, []any{a0, a1}, []any{&r0})
	return
}

func (s postStorageService_reflect_stub) ReadPosts(ctx context.Context, a0 int64, a1 []string) (r0 []model.Post, err error) {
	err = s.caller("ReadPosts", ctx, []any{a0, a1}, []any{&r0})
	return
}

func (s postStorageService_reflect_stub) StorePost(ctx context.Context, a0 int64, a1 model.Post) (r0 []byte, err error) {
	err = s.caller("StorePost", ctx, []any{a0, a1}, []any{&r0})
	return
}

func (s postStorageService_reflect_stub) UpdatePost(ctx context.Context, a0 int64, a1 model.Post) (r0 []byte, err error) {
	err = s.caller("UpdatePost", ctx, []any{a0, a1}, []any{&r0})
	return
}

type socialGraphService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that socialGraphService_reflect_stub implements the SocialGraphService interface.
var _ SocialGraphService = (*socialGraphService_reflect_stub)(nil)

func (s socialGraphService_reflect_stub) Follow(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	err = s.caller("Follow", ctx, []any{a0, a1, a2}, []any{})
	return
}

func (s socialGraphService_reflect_stub) FollowWithUsername(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	err = s.caller("FollowWithUsername", ctx, []any{a0, a1, a2}, []any{})
	return
}

func (s socialGraphService_reflect_stub) GetFollowees(ctx context.Context, a0 int64, a1 string) (r0 []string, err error) {
	err = s.caller("GetFollowees", ctx, []any{a0, a1}, []any{&r0})
	return
}

func (s socialGraphService_reflect_stub) GetFollowers(ctx context.Context, a0 int64, a1 string) (r0 []string, err error) {
	err = s.caller("GetFollowers", ctx, []any{a0, a1}, []any{&r0})
	return
}

func (s socialGraphService_reflect_stub) InsertUser(ctx context.Context, a0 int64, a1 string) (err error) {
	err = s.caller("InsertUser", ctx, []any{a0, a1}, []any{})
	return
}

func (s socialGraphService_reflect_stub) Unfollow(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	err = s.caller("Unfollow", ctx, []any{a0, a1, a2}, []any{})
	return
}

func (s socialGraphService_reflect_stub) UnfollowWithUsername(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	err = s.caller("UnfollowWithUsername", ctx, []any{a0, a1, a2}, []any{})
	return
}

type textService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that textService_reflect_stub implements the TextService interface.
var _ TextService = (*textService_reflect_stub)(nil)

func (s textService_reflect_stub) UploadText(ctx context.Context, a0 int64, a1 string, a2 bool) (err error) {
	err = s.caller("UploadText", ctx, []any{a0, a1, a2}, []any{})
	return
}

type uniqueIdService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that uniqueIdService_reflect_stub implements the UniqueIdService interface.
var _ UniqueIdService = (*uniqueIdService_reflect_stub)(nil)

func (s uniqueIdService_reflect_stub) UploadUniqueId(ctx context.Context, a0 int64, a1 model.PostType, a2 string) (r0 string, err error) {
	err = s.caller("UploadUniqueId", ctx, []any{a0, a1, a2}, []any{&r0})
	return
}

type urlShortenService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that urlShortenService_reflect_stub implements the UrlShortenService interface.
var _ UrlShortenService = (*urlShortenService_reflect_stub)(nil)

func (s urlShortenService_reflect_stub) GetExtendedUrls(ctx context.Context, a0 int64, a1 []string) (r0 []string, err error) {
	err = s.caller("GetExtendedUrls", ctx, []any{a0, a1}, []any{&r0})
	return
}

func (s urlShortenService_reflect_stub) UploadUrls(ctx context.Context, a0 int64, a1 []string, a2 bool) (err error) {
	err = s.caller("UploadUrls", ctx, []any{a0, a1, a2}, []any{})
	return
}

type userMentionService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that userMentionService_reflect_stub implements the UserMentionService interface.
var _ UserMentionService = (*userMentionService_reflect_stub)(nil)

func (s userMentionService_reflect_stub) UploadUserMentions(ctx context.Context, a0 int64, a1 []string, a2 bool) (err error) {
	err = s.caller("UploadUserMentions", ctx, []any{a0, a1, a2}, []any{})
	return
}

type userService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that userService_reflect_stub implements the UserService interface.
var _ UserService = (*userService_reflect_stub)(nil)

func (s userService_reflect_stub) GetUserId(ctx context.Context, a0 int64, a1 string) (r0 string, err error) {
	err = s.caller("GetUserId", ctx, []any{a0, a1}, []any{&r0})
	return
}

func (s userService_reflect_stub) Login(ctx context.Context, a0 int64, a1 string, a2 string) (r0 string, err error) {
	err = s.caller("Login", ctx, []any{a0, a1, a2}, []any{&r0})
	return
}

func (s userService_reflect_stub) RegisterUser(ctx context.Context, a0 int64, a1 string, a2 string, a3 string, a4 string) (err error) {
	err = s.caller("RegisterUser", ctx, []any{a0, a1, a2, a3, a4}, []any{})
	return
}

func (s userService_reflect_stub) RegisterUserWithId(ctx context.Context, a0 int64, a1 string, a2 string, a3 string, a4 string, a5 string) (err error) {
	err = s.caller("RegisterUserWithId", ctx, []any{a0, a1, a2, a3, a4, a5}, []any{})
	return
}

func (s userService_reflect_stub) UploadCreatorWithUserId(ctx context.Context, a0 int64, a1 string, a2 string, a3 bool) (err error) {
	err = s.caller("UploadCreatorWithUserId", ctx, []any{a0, a1, a2, a3}, []any{})
	return
}

func (s userService_reflect_stub) UploadCreatorWithUsername(ctx context.Context, a0 int64, a1 string, a2 bool) (err error) {
	err = s.caller("UploadCreatorWithUsername", ctx, []any{a0, a1, a2}, []any{})
	return
}

type userTimelineService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that userTimelineService_reflect_stub implements the UserTimelineService interface.
var _ UserTimelineService = (*userTimelineService_reflect_stub)(nil)

func (s userTimelineService_reflect_stub) ReadUserTimeline(ctx context.Context, a0 int64, a1 string, a2 int64, a3 int64) (r0 []model.Post, err error) {
	err = s.caller("ReadUserTimeline", ctx, []any{a0, a1, a2, a3}, []any{&r0})
	return
}

func (s userTimelineService_reflect_stub) WriteUserTimeline(ctx context.Context, a0 int64, a1 string, a2 string, a3 int64) (err error) {
	err = s.caller("WriteUserTimeline", ctx, []any{a0, a1, a2, a3}, []any{})
	return
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_Media_2b5ca60e(enc *codegen.Encoder, arg []model.Media) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_Media_2b5ca60e(dec *codegen.Decoder) []model.Media {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]model.Media, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

func serviceweaver_enc_slice_URL_eb8a95e1(enc *codegen.Encoder, arg []model.URL) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_URL_eb8a95e1(dec *codegen.Decoder) []model.URL {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]model.URL, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

func serviceweaver_enc_slice_UserMention_2dd696ff(enc *codegen.Encoder, arg []model.UserMention) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_UserMention_2dd696ff(dec *codegen.Decoder) []model.UserMention {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]model.UserMention, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

func serviceweaver_enc_slice_Post_1f0ff041(enc *codegen.Encoder, arg []model.Post) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_Post_1f0ff041(dec *codegen.Decoder) []model.Post {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]model.Post, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

func serviceweaver_enc_slice_string_4af10117(enc *codegen.Encoder, arg []string) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.String(arg[i])
	}
}

func serviceweaver_dec_slice_string_4af10117(dec *codegen.Decoder) []string {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]string, n)
	for i := 0; i < n; i++ {
		res[i] = dec.String()
	}
	return res
}

func serviceweaver_enc_slice_int64_a8f7f092(enc *codegen.Encoder, arg []int64) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.Int64(arg[i])
	}
}

func serviceweaver_dec_slice_int64_a8f7f092(dec *codegen.Decoder) []int64 {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]int64, n)
	for i := 0; i < n; i++ {
		res[i] = dec.Int64()
	}
	return res
}

func serviceweaver_enc_slice_byte_87461245(enc *codegen.Encoder, arg []byte) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.Byte(arg[i])
	}
}

func serviceweaver_dec_slice_byte_87461245(dec *codegen.Decoder) []byte {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]byte, n)
	for i := 0; i < n; i++ {
		res[i] = dec.Byte()
	}
	return res
}
