// Code generated by "xcweaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package main

import (
	"context"
	"errors"
	"fmt"
	"github.com/XCWeaver/xcweaver"
	"github.com/XCWeaver/xcweaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:           "us-deployment/FollowerNotify",
		Iface:          reflect.TypeOf((*FollowerNotify)(nil)).Elem(),
		Impl:           reflect.TypeOf(followerNotify{}),
		AntipodeAgents: []string{"client"},
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return followerNotify_local_stub{impl: impl.(FollowerNotify), tracer: tracer, follower_NotifyMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us-deployment/FollowerNotify", Method: "Follower_Notify", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return followerNotify_client_stub{stub: stub, follower_NotifyMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us-deployment/FollowerNotify", Method: "Follower_Notify", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return followerNotify_server_stub{impl: impl.(FollowerNotify), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return followerNotify_reflect_stub{caller: caller}
		},
		RefData: "⟦7787b754:wEaVeReDgE:us-deployment/FollowerNotify→us-deployment/PostStorageUS⟧\n⟦42b30686:wEaVeRaNtIpOdEaGeNtS:us-deployment/FollowerNotify→client⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:      "github.com/XCWeaver/xcweaver/Main",
		Iface:     reflect.TypeOf((*xcweaver.Main)(nil)).Elem(),
		Impl:      reflect.TypeOf(app{}),
		Listeners: []string{"postnot"},
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return main_local_stub{impl: impl.(xcweaver.Main), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any { return main_client_stub{stub: stub} },
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return main_server_stub{impl: impl.(xcweaver.Main), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return main_reflect_stub{caller: caller}
		},
		RefData: "⟦1ada1f0f:wEaVeReDgE:github.com/XCWeaver/xcweaver/Main→us-deployment/Notifier⟧\n⟦f515ff63:wEaVeReDgE:github.com/XCWeaver/xcweaver/Main→us-deployment/PostStorageUS⟧\n⟦b0383eb4:wEaVeRlIsTeNeRs:github.com/XCWeaver/xcweaver/Main→postnot⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:           "us-deployment/Notifier",
		Iface:          reflect.TypeOf((*Notifier)(nil)).Elem(),
		Impl:           reflect.TypeOf(notifier{}),
		AntipodeAgents: []string{"clientRabbitMQ"},
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return notifier_local_stub{impl: impl.(Notifier), tracer: tracer, readNotificationMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us-deployment/Notifier", Method: "ReadNotification", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return notifier_client_stub{stub: stub, readNotificationMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us-deployment/Notifier", Method: "ReadNotification", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return notifier_server_stub{impl: impl.(Notifier), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return notifier_reflect_stub{caller: caller}
		},
		RefData: "⟦61a073e5:wEaVeReDgE:us-deployment/Notifier→us-deployment/FollowerNotify⟧\n⟦1c3e354a:wEaVeRaNtIpOdEaGeNtS:us-deployment/Notifier→clientRabbitMQ⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:           "us-deployment/PostStorageUS",
		Iface:          reflect.TypeOf((*PostStorageUS)(nil)).Elem(),
		Impl:           reflect.TypeOf(postStorageUS{}),
		AntipodeAgents: []string{"client"},
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return postStorageUS_local_stub{impl: impl.(PostStorageUS), tracer: tracer, getConsistencyWindowValuesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us-deployment/PostStorageUS", Method: "GetConsistencyWindowValues", Remote: false, Generated: true}), getInconsistenciesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us-deployment/PostStorageUS", Method: "GetInconsistencies", Remote: false, Generated: true}), getPostMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us-deployment/PostStorageUS", Method: "GetPost", Remote: false, Generated: true}), resetMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us-deployment/PostStorageUS", Method: "Reset", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return postStorageUS_client_stub{stub: stub, getConsistencyWindowValuesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us-deployment/PostStorageUS", Method: "GetConsistencyWindowValues", Remote: true, Generated: true}), getInconsistenciesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us-deployment/PostStorageUS", Method: "GetInconsistencies", Remote: true, Generated: true}), getPostMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us-deployment/PostStorageUS", Method: "GetPost", Remote: true, Generated: true}), resetMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us-deployment/PostStorageUS", Method: "Reset", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return postStorageUS_server_stub{impl: impl.(PostStorageUS), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return postStorageUS_reflect_stub{caller: caller}
		},
		RefData: "⟦3c2da220:wEaVeRaNtIpOdEaGeNtS:us-deployment/PostStorageUS→client⟧\n",
	})
}

// xcweaver.InstanceOf checks.
var _ xcweaver.InstanceOf[FollowerNotify] = (*followerNotify)(nil)
var _ xcweaver.InstanceOf[xcweaver.Main] = (*app)(nil)
var _ xcweaver.InstanceOf[Notifier] = (*notifier)(nil)
var _ xcweaver.InstanceOf[PostStorageUS] = (*postStorageUS)(nil)

// xcweaver.Router checks.
var _ xcweaver.Unrouted = (*followerNotify)(nil)
var _ xcweaver.Unrouted = (*app)(nil)
var _ xcweaver.Unrouted = (*notifier)(nil)
var _ xcweaver.Unrouted = (*postStorageUS)(nil)

// Local stub implementations.

type followerNotify_local_stub struct {
	impl                   FollowerNotify
	tracer                 trace.Tracer
	follower_NotifyMetrics *codegen.MethodMetrics
}

// Check that followerNotify_local_stub implements the FollowerNotify interface.
var _ FollowerNotify = (*followerNotify_local_stub)(nil)

func (s followerNotify_local_stub) Follower_Notify(ctx context.Context, a0 Post_id_obj, a1 int) (err error) {
	// Update metrics.
	begin := s.follower_NotifyMetrics.Begin()
	defer func() { s.follower_NotifyMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.FollowerNotify.Follower_Notify", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Follower_Notify(ctx, a0, a1)
}

type main_local_stub struct {
	impl   xcweaver.Main
	tracer trace.Tracer
}

// Check that main_local_stub implements the xcweaver.Main interface.
var _ xcweaver.Main = (*main_local_stub)(nil)

type notifier_local_stub struct {
	impl                    Notifier
	tracer                  trace.Tracer
	readNotificationMetrics *codegen.MethodMetrics
}

// Check that notifier_local_stub implements the Notifier interface.
var _ Notifier = (*notifier_local_stub)(nil)

func (s notifier_local_stub) ReadNotification(ctx context.Context) (err error) {
	// Update metrics.
	begin := s.readNotificationMetrics.Begin()
	defer func() { s.readNotificationMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.Notifier.ReadNotification", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ReadNotification(ctx)
}

type postStorageUS_local_stub struct {
	impl                              PostStorageUS
	tracer                            trace.Tracer
	getConsistencyWindowValuesMetrics *codegen.MethodMetrics
	getInconsistenciesMetrics         *codegen.MethodMetrics
	getPostMetrics                    *codegen.MethodMetrics
	resetMetrics                      *codegen.MethodMetrics
}

// Check that postStorageUS_local_stub implements the PostStorageUS interface.
var _ PostStorageUS = (*postStorageUS_local_stub)(nil)

func (s postStorageUS_local_stub) GetConsistencyWindowValues(ctx context.Context) (r0 []float64, err error) {
	// Update metrics.
	begin := s.getConsistencyWindowValuesMetrics.Begin()
	defer func() { s.getConsistencyWindowValuesMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.PostStorageUS.GetConsistencyWindowValues", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetConsistencyWindowValues(ctx)
}

func (s postStorageUS_local_stub) GetInconsistencies(ctx context.Context) (r0 int, err error) {
	// Update metrics.
	begin := s.getInconsistenciesMetrics.Begin()
	defer func() { s.getInconsistenciesMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.PostStorageUS.GetInconsistencies", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetInconsistencies(ctx)
}

func (s postStorageUS_local_stub) GetPost(ctx context.Context, a0 Post_id_obj) (r0 string, err error) {
	// Update metrics.
	begin := s.getPostMetrics.Begin()
	defer func() { s.getPostMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.PostStorageUS.GetPost", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetPost(ctx, a0)
}

func (s postStorageUS_local_stub) Reset(ctx context.Context) (err error) {
	// Update metrics.
	begin := s.resetMetrics.Begin()
	defer func() { s.resetMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.PostStorageUS.Reset", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Reset(ctx)
}

// Client stub implementations.

type followerNotify_client_stub struct {
	stub                   codegen.Stub
	follower_NotifyMetrics *codegen.MethodMetrics
}

// Check that followerNotify_client_stub implements the FollowerNotify interface.
var _ FollowerNotify = (*followerNotify_client_stub)(nil)

func (s followerNotify_client_stub) Follower_Notify(ctx context.Context, a0 Post_id_obj, a1 int) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.follower_NotifyMetrics.Begin()
	defer func() { s.follower_NotifyMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.FollowerNotify.Follower_Notify", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += serviceweaver_size_Post_id_obj_8af3edf5(&a0)
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	(a0).WeaverMarshal(enc)
	enc.Int(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type main_client_stub struct {
	stub codegen.Stub
}

// Check that main_client_stub implements the xcweaver.Main interface.
var _ xcweaver.Main = (*main_client_stub)(nil)

type notifier_client_stub struct {
	stub                    codegen.Stub
	readNotificationMetrics *codegen.MethodMetrics
}

// Check that notifier_client_stub implements the Notifier interface.
var _ Notifier = (*notifier_client_stub)(nil)

func (s notifier_client_stub) ReadNotification(ctx context.Context) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.readNotificationMetrics.Begin()
	defer func() { s.readNotificationMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.Notifier.ReadNotification", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 0, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type postStorageUS_client_stub struct {
	stub                              codegen.Stub
	getConsistencyWindowValuesMetrics *codegen.MethodMetrics
	getInconsistenciesMetrics         *codegen.MethodMetrics
	getPostMetrics                    *codegen.MethodMetrics
	resetMetrics                      *codegen.MethodMetrics
}

// Check that postStorageUS_client_stub implements the PostStorageUS interface.
var _ PostStorageUS = (*postStorageUS_client_stub)(nil)

func (s postStorageUS_client_stub) GetConsistencyWindowValues(ctx context.Context) (r0 []float64, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getConsistencyWindowValuesMetrics.Begin()
	defer func() { s.getConsistencyWindowValuesMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.PostStorageUS.GetConsistencyWindowValues", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 0, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_float64_946dd0da(dec)
	err = dec.Error()
	return
}

func (s postStorageUS_client_stub) GetInconsistencies(ctx context.Context) (r0 int, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getInconsistenciesMetrics.Begin()
	defer func() { s.getInconsistenciesMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.PostStorageUS.GetInconsistencies", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 1, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.Int()
	err = dec.Error()
	return
}

func (s postStorageUS_client_stub) GetPost(ctx context.Context, a0 Post_id_obj) (r0 string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getPostMetrics.Begin()
	defer func() { s.getPostMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.PostStorageUS.GetPost", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += serviceweaver_size_Post_id_obj_8af3edf5(&a0)
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.String()
	err = dec.Error()
	return
}

func (s postStorageUS_client_stub) Reset(ctx context.Context) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.resetMetrics.Begin()
	defer func() { s.resetMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.PostStorageUS.Reset", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(xcweaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 3, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(xcweaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

// Note that "xcweaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][24]struct{}](`

ERROR: You generated this file with 'xcweaver generate' v0.24.3 (codegen
version v0.24.0). The generated code is incompatible with the version of the
github.com/XCWeaver/xcweaver module that you're using. The xcweaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/XCWeaver/xcweaver

We recommend updating the xcweaver module and the 'xcweaver generate' command by
running the following.

    go get github.com/XCWeaver/xcweaver@latest
    go install github.com/XCWeaver/xcweaver/cmd/xcweaver@latest

Then, re-run 'xcweaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/XCWeaver/xcweaver/issues.

`)

// Server stub implementations.

type followerNotify_server_stub struct {
	impl    FollowerNotify
	addLoad func(key uint64, load float64)
}

// Check that followerNotify_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*followerNotify_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s followerNotify_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Follower_Notify":
		return s.follower_Notify
	default:
		return nil
	}
}

func (s followerNotify_server_stub) follower_Notify(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 Post_id_obj
	(&a0).WeaverUnmarshal(dec)
	var a1 int
	a1 = dec.Int()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Follower_Notify(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type main_server_stub struct {
	impl    xcweaver.Main
	addLoad func(key uint64, load float64)
}

// Check that main_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*main_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s main_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	default:
		return nil
	}
}

type notifier_server_stub struct {
	impl    Notifier
	addLoad func(key uint64, load float64)
}

// Check that notifier_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*notifier_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s notifier_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "ReadNotification":
		return s.readNotification
	default:
		return nil
	}
}

func (s notifier_server_stub) readNotification(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.ReadNotification(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type postStorageUS_server_stub struct {
	impl    PostStorageUS
	addLoad func(key uint64, load float64)
}

// Check that postStorageUS_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*postStorageUS_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s postStorageUS_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GetConsistencyWindowValues":
		return s.getConsistencyWindowValues
	case "GetInconsistencies":
		return s.getInconsistencies
	case "GetPost":
		return s.getPost
	case "Reset":
		return s.reset
	default:
		return nil
	}
}

func (s postStorageUS_server_stub) getConsistencyWindowValues(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetConsistencyWindowValues(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_float64_946dd0da(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s postStorageUS_server_stub) getInconsistencies(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetInconsistencies(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Int(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s postStorageUS_server_stub) getPost(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 Post_id_obj
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetPost(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.String(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s postStorageUS_server_stub) reset(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Reset(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type followerNotify_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that followerNotify_reflect_stub implements the FollowerNotify interface.
var _ FollowerNotify = (*followerNotify_reflect_stub)(nil)

func (s followerNotify_reflect_stub) Follower_Notify(ctx context.Context, a0 Post_id_obj, a1 int) (err error) {
	err = s.caller("Follower_Notify", ctx, []any{a0, a1}, []any{})
	return
}

type main_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that main_reflect_stub implements the xcweaver.Main interface.
var _ xcweaver.Main = (*main_reflect_stub)(nil)

type notifier_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that notifier_reflect_stub implements the Notifier interface.
var _ Notifier = (*notifier_reflect_stub)(nil)

func (s notifier_reflect_stub) ReadNotification(ctx context.Context) (err error) {
	err = s.caller("ReadNotification", ctx, []any{}, []any{})
	return
}

type postStorageUS_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that postStorageUS_reflect_stub implements the PostStorageUS interface.
var _ PostStorageUS = (*postStorageUS_reflect_stub)(nil)

func (s postStorageUS_reflect_stub) GetConsistencyWindowValues(ctx context.Context) (r0 []float64, err error) {
	err = s.caller("GetConsistencyWindowValues", ctx, []any{}, []any{&r0})
	return
}

func (s postStorageUS_reflect_stub) GetInconsistencies(ctx context.Context) (r0 int, err error) {
	err = s.caller("GetInconsistencies", ctx, []any{}, []any{&r0})
	return
}

func (s postStorageUS_reflect_stub) GetPost(ctx context.Context, a0 Post_id_obj) (r0 string, err error) {
	err = s.caller("GetPost", ctx, []any{a0}, []any{&r0})
	return
}

func (s postStorageUS_reflect_stub) Reset(ctx context.Context) (err error) {
	err = s.caller("Reset", ctx, []any{}, []any{})
	return
}

// AutoMarshal implementations.

var _ codegen.AutoMarshal = (*Post_id_obj)(nil)

type __is_Post_id_obj[T ~struct {
	xcweaver.AutoMarshal
	PostId    string
	WriteTime int64
}] struct{}

var _ __is_Post_id_obj[Post_id_obj]

func (x *Post_id_obj) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Post_id_obj.WeaverMarshal: nil receiver"))
	}
	enc.String(x.PostId)
	enc.Int64(x.WriteTime)
}

func (x *Post_id_obj) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Post_id_obj.WeaverUnmarshal: nil receiver"))
	}
	x.PostId = dec.String()
	x.WriteTime = dec.Int64()
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_float64_946dd0da(enc *codegen.Encoder, arg []float64) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.Float64(arg[i])
	}
}

func serviceweaver_dec_slice_float64_946dd0da(dec *codegen.Decoder) []float64 {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]float64, n)
	for i := 0; i < n; i++ {
		res[i] = dec.Float64()
	}
	return res
}

// Size implementations.

// serviceweaver_size_Post_id_obj_8af3edf5 returns the size (in bytes) of the serialization
// of the provided type.
func serviceweaver_size_Post_id_obj_8af3edf5(x *Post_id_obj) int {
	size := 0
	size += 0
	size += (4 + len(x.PostId))
	size += 8
	return size
}
