// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package main

import (
	"context"
	"errors"
	"fmt"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:      "github.com/ServiceWeaver/weaver/Main",
		Iface:     reflect.TypeOf((*weaver.Main)(nil)).Elem(),
		Impl:      reflect.TypeOf(app{}),
		Listeners: []string{"post_notification"},
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return main_local_stub{impl: impl.(weaver.Main), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any { return main_client_stub{stub: stub} },
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return main_server_stub{impl: impl.(weaver.Main), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return main_reflect_stub{caller: caller}
		},
		RefData: "⟦655fa154:wEaVeReDgE:github.com/ServiceWeaver/weaver/Main→eu_deployment/Post_upload⟧\n⟦023d4964:wEaVeRlIsTeNeRs:github.com/ServiceWeaver/weaver/Main→post_notification⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "eu_deployment/Notifier",
		Iface: reflect.TypeOf((*Notifier)(nil)).Elem(),
		Impl:  reflect.TypeOf(notifier{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return notifier_local_stub{impl: impl.(Notifier), tracer: tracer, notifyMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/Notifier", Method: "Notify", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return notifier_client_stub{stub: stub, notifyMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/Notifier", Method: "Notify", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return notifier_server_stub{impl: impl.(Notifier), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return notifier_reflect_stub{caller: caller}
		},
		RefData: "",
	})
	codegen.Register(codegen.Registration{
		Name:  "eu_deployment/Post_storage_europe",
		Iface: reflect.TypeOf((*Post_storage_europe)(nil)).Elem(),
		Impl:  reflect.TypeOf(post_storage_europe{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return post_storage_europe_local_stub{impl: impl.(Post_storage_europe), tracer: tracer, postMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/Post_storage_europe", Method: "Post", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return post_storage_europe_client_stub{stub: stub, postMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/Post_storage_europe", Method: "Post", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return post_storage_europe_server_stub{impl: impl.(Post_storage_europe), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return post_storage_europe_reflect_stub{caller: caller}
		},
		RefData: "",
	})
	codegen.Register(codegen.Registration{
		Name:  "eu_deployment/Post_upload",
		Iface: reflect.TypeOf((*Post_upload)(nil)).Elem(),
		Impl:  reflect.TypeOf(post_upload{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return post_upload_local_stub{impl: impl.(Post_upload), tracer: tracer, postMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/Post_upload", Method: "Post", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return post_upload_client_stub{stub: stub, postMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "eu_deployment/Post_upload", Method: "Post", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return post_upload_server_stub{impl: impl.(Post_upload), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return post_upload_reflect_stub{caller: caller}
		},
		RefData: "⟦2fdeb425:wEaVeReDgE:eu_deployment/Post_upload→eu_deployment/Post_storage_europe⟧\n⟦a7065768:wEaVeReDgE:eu_deployment/Post_upload→eu_deployment/Notifier⟧\n",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[weaver.Main] = (*app)(nil)
var _ weaver.InstanceOf[Notifier] = (*notifier)(nil)
var _ weaver.InstanceOf[Post_storage_europe] = (*post_storage_europe)(nil)
var _ weaver.InstanceOf[Post_upload] = (*post_upload)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*app)(nil)
var _ weaver.Unrouted = (*notifier)(nil)
var _ weaver.Unrouted = (*post_storage_europe)(nil)
var _ weaver.Unrouted = (*post_upload)(nil)

// Local stub implementations.

type main_local_stub struct {
	impl   weaver.Main
	tracer trace.Tracer
}

// Check that main_local_stub implements the weaver.Main interface.
var _ weaver.Main = (*main_local_stub)(nil)

type notifier_local_stub struct {
	impl          Notifier
	tracer        trace.Tracer
	notifyMetrics *codegen.MethodMetrics
}

// Check that notifier_local_stub implements the Notifier interface.
var _ Notifier = (*notifier_local_stub)(nil)

func (s notifier_local_stub) Notify(ctx context.Context, a0 Post_id_obj, a1 int) (err error) {
	// Update metrics.
	begin := s.notifyMetrics.Begin()
	defer func() { s.notifyMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.Notifier.Notify", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Notify(ctx, a0, a1)
}

type post_storage_europe_local_stub struct {
	impl        Post_storage_europe
	tracer      trace.Tracer
	postMetrics *codegen.MethodMetrics
}

// Check that post_storage_europe_local_stub implements the Post_storage_europe interface.
var _ Post_storage_europe = (*post_storage_europe_local_stub)(nil)

func (s post_storage_europe_local_stub) Post(ctx context.Context, a0 string) (r0 Post_id_obj, err error) {
	// Update metrics.
	begin := s.postMetrics.Begin()
	defer func() { s.postMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.Post_storage_europe.Post", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Post(ctx, a0)
}

type post_upload_local_stub struct {
	impl        Post_upload
	tracer      trace.Tracer
	postMetrics *codegen.MethodMetrics
}

// Check that post_upload_local_stub implements the Post_upload interface.
var _ Post_upload = (*post_upload_local_stub)(nil)

func (s post_upload_local_stub) Post(ctx context.Context, a0 string, a1 int) (err error) {
	// Update metrics.
	begin := s.postMetrics.Begin()
	defer func() { s.postMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.Post_upload.Post", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Post(ctx, a0, a1)
}

// Client stub implementations.

type main_client_stub struct {
	stub codegen.Stub
}

// Check that main_client_stub implements the weaver.Main interface.
var _ weaver.Main = (*main_client_stub)(nil)

type notifier_client_stub struct {
	stub          codegen.Stub
	notifyMetrics *codegen.MethodMetrics
}

// Check that notifier_client_stub implements the Notifier interface.
var _ Notifier = (*notifier_client_stub)(nil)

func (s notifier_client_stub) Notify(ctx context.Context, a0 Post_id_obj, a1 int) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.notifyMetrics.Begin()
	defer func() { s.notifyMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.Notifier.Notify", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += serviceweaver_size_Post_id_obj_c8baf7db(&a0)
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	(a0).WeaverMarshal(enc)
	enc.Int(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type post_storage_europe_client_stub struct {
	stub        codegen.Stub
	postMetrics *codegen.MethodMetrics
}

// Check that post_storage_europe_client_stub implements the Post_storage_europe interface.
var _ Post_storage_europe = (*post_storage_europe_client_stub)(nil)

func (s post_storage_europe_client_stub) Post(ctx context.Context, a0 string) (r0 Post_id_obj, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.postMetrics.Begin()
	defer func() { s.postMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.Post_storage_europe.Post", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

type post_upload_client_stub struct {
	stub        codegen.Stub
	postMetrics *codegen.MethodMetrics
}

// Check that post_upload_client_stub implements the Post_upload interface.
var _ Post_upload = (*post_upload_client_stub)(nil)

func (s post_upload_client_stub) Post(ctx context.Context, a0 string, a1 int) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.postMetrics.Begin()
	defer func() { s.postMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.Post_upload.Post", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	enc.Int(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][20]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.22.1-0.20231019162801-c2294d1ae0e8 (codegen
version v0.20.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

type main_server_stub struct {
	impl    weaver.Main
	addLoad func(key uint64, load float64)
}

// Check that main_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*main_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s main_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	default:
		return nil
	}
}

type notifier_server_stub struct {
	impl    Notifier
	addLoad func(key uint64, load float64)
}

// Check that notifier_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*notifier_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s notifier_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Notify":
		return s.notify
	default:
		return nil
	}
}

func (s notifier_server_stub) notify(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 Post_id_obj
	(&a0).WeaverUnmarshal(dec)
	var a1 int
	a1 = dec.Int()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Notify(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type post_storage_europe_server_stub struct {
	impl    Post_storage_europe
	addLoad func(key uint64, load float64)
}

// Check that post_storage_europe_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*post_storage_europe_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s post_storage_europe_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Post":
		return s.post
	default:
		return nil
	}
}

func (s post_storage_europe_server_stub) post(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Post(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

type post_upload_server_stub struct {
	impl    Post_upload
	addLoad func(key uint64, load float64)
}

// Check that post_upload_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*post_upload_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s post_upload_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Post":
		return s.post
	default:
		return nil
	}
}

func (s post_upload_server_stub) post(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 int
	a1 = dec.Int()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Post(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type main_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that main_reflect_stub implements the weaver.Main interface.
var _ weaver.Main = (*main_reflect_stub)(nil)

type notifier_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that notifier_reflect_stub implements the Notifier interface.
var _ Notifier = (*notifier_reflect_stub)(nil)

func (s notifier_reflect_stub) Notify(ctx context.Context, a0 Post_id_obj, a1 int) (err error) {
	err = s.caller("Notify", ctx, []any{a0, a1}, []any{})
	return
}

type post_storage_europe_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that post_storage_europe_reflect_stub implements the Post_storage_europe interface.
var _ Post_storage_europe = (*post_storage_europe_reflect_stub)(nil)

func (s post_storage_europe_reflect_stub) Post(ctx context.Context, a0 string) (r0 Post_id_obj, err error) {
	err = s.caller("Post", ctx, []any{a0}, []any{&r0})
	return
}

type post_upload_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that post_upload_reflect_stub implements the Post_upload interface.
var _ Post_upload = (*post_upload_reflect_stub)(nil)

func (s post_upload_reflect_stub) Post(ctx context.Context, a0 string, a1 int) (err error) {
	err = s.caller("Post", ctx, []any{a0, a1}, []any{})
	return
}

// AutoMarshal implementations.

var _ codegen.AutoMarshal = (*Post_id_obj)(nil)

type __is_Post_id_obj[T ~struct {
	weaver.AutoMarshal
	PostId    string
	WriteTime int64
}] struct{}

var _ __is_Post_id_obj[Post_id_obj]

func (x *Post_id_obj) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Post_id_obj.WeaverMarshal: nil receiver"))
	}
	enc.String(x.PostId)
	enc.Int64(x.WriteTime)
}

func (x *Post_id_obj) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Post_id_obj.WeaverUnmarshal: nil receiver"))
	}
	x.PostId = dec.String()
	x.WriteTime = dec.Int64()
}

// Size implementations.

// serviceweaver_size_Post_id_obj_c8baf7db returns the size (in bytes) of the serialization
// of the provided type.
func serviceweaver_size_Post_id_obj_c8baf7db(x *Post_id_obj) int {
	size := 0
	size += 0
	size += (4 + len(x.PostId))
	size += 8
	return size
}
