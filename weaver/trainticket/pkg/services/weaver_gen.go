// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package services

import (
	"context"
	"errors"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
	"trainticket/pkg/model"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "trainticket/pkg/services/CancelService",
		Iface: reflect.TypeOf((*CancelService)(nil)).Elem(),
		Impl:  reflect.TypeOf(cancelService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return cancelService_local_stub{impl: impl.(CancelService), tracer: tracer, calculateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/CancelService", Method: "Calculate", Remote: false, Generated: true}), cancelTicketMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/CancelService", Method: "CancelTicket", Remote: false, Generated: true}), getConsistencyWindowValuesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/CancelService", Method: "GetConsistencyWindowValues", Remote: false, Generated: true}), getInconsistenciesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/CancelService", Method: "GetInconsistencies", Remote: false, Generated: true}), resetMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/CancelService", Method: "Reset", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return cancelService_client_stub{stub: stub, calculateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/CancelService", Method: "Calculate", Remote: true, Generated: true}), cancelTicketMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/CancelService", Method: "CancelTicket", Remote: true, Generated: true}), getConsistencyWindowValuesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/CancelService", Method: "GetConsistencyWindowValues", Remote: true, Generated: true}), getInconsistenciesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/CancelService", Method: "GetInconsistencies", Remote: true, Generated: true}), resetMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/CancelService", Method: "Reset", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return cancelService_server_stub{impl: impl.(CancelService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return cancelService_reflect_stub{caller: caller}
		},
		RefData: "⟦1cdefd5f:wEaVeReDgE:trainticket/pkg/services/CancelService→trainticket/pkg/services/OrderService⟧\n⟦e3e9ea5a:wEaVeReDgE:trainticket/pkg/services/CancelService→trainticket/pkg/services/OrderOtherService⟧\n⟦6bdfb640:wEaVeReDgE:trainticket/pkg/services/CancelService→trainticket/pkg/services/InsidePaymentService⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "trainticket/pkg/services/InsidePaymentService",
		Iface: reflect.TypeOf((*InsidePaymentService)(nil)).Elem(),
		Impl:  reflect.TypeOf(insidePaymentService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return insidePaymentService_local_stub{impl: impl.(InsidePaymentService), tracer: tracer, drawBackMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/InsidePaymentService", Method: "DrawBack", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return insidePaymentService_client_stub{stub: stub, drawBackMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/InsidePaymentService", Method: "DrawBack", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return insidePaymentService_server_stub{impl: impl.(InsidePaymentService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return insidePaymentService_reflect_stub{caller: caller}
		},
		RefData: "⟦950adffe:wEaVeReDgE:trainticket/pkg/services/InsidePaymentService→trainticket/pkg/services/OrderService⟧\n⟦18df40b9:wEaVeReDgE:trainticket/pkg/services/InsidePaymentService→trainticket/pkg/services/OrderOtherService⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "trainticket/pkg/services/OrderOtherService",
		Iface: reflect.TypeOf((*OrderOtherService)(nil)).Elem(),
		Impl:  reflect.TypeOf(orderOtherService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return orderOtherService_local_stub{impl: impl.(OrderOtherService), tracer: tracer, getOrderByIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/OrderOtherService", Method: "GetOrderById", Remote: false, Generated: true}), modifyOrderMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/OrderOtherService", Method: "ModifyOrder", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return orderOtherService_client_stub{stub: stub, getOrderByIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/OrderOtherService", Method: "GetOrderById", Remote: true, Generated: true}), modifyOrderMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/OrderOtherService", Method: "ModifyOrder", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return orderOtherService_server_stub{impl: impl.(OrderOtherService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return orderOtherService_reflect_stub{caller: caller}
		},
		RefData: "",
	})
	codegen.Register(codegen.Registration{
		Name:  "trainticket/pkg/services/OrderService",
		Iface: reflect.TypeOf((*OrderService)(nil)).Elem(),
		Impl:  reflect.TypeOf(orderService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return orderService_local_stub{impl: impl.(OrderService), tracer: tracer, getOrderByIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/OrderService", Method: "GetOrderById", Remote: false, Generated: true}), modifyOrderMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/OrderService", Method: "ModifyOrder", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return orderService_client_stub{stub: stub, getOrderByIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/OrderService", Method: "GetOrderById", Remote: true, Generated: true}), modifyOrderMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "trainticket/pkg/services/OrderService", Method: "ModifyOrder", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return orderService_server_stub{impl: impl.(OrderService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return orderService_reflect_stub{caller: caller}
		},
		RefData: "",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[CancelService] = (*cancelService)(nil)
var _ weaver.InstanceOf[InsidePaymentService] = (*insidePaymentService)(nil)
var _ weaver.InstanceOf[OrderOtherService] = (*orderOtherService)(nil)
var _ weaver.InstanceOf[OrderService] = (*orderService)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*cancelService)(nil)
var _ weaver.Unrouted = (*insidePaymentService)(nil)
var _ weaver.Unrouted = (*orderOtherService)(nil)
var _ weaver.Unrouted = (*orderService)(nil)

// Local stub implementations.

type cancelService_local_stub struct {
	impl                              CancelService
	tracer                            trace.Tracer
	calculateMetrics                  *codegen.MethodMetrics
	cancelTicketMetrics               *codegen.MethodMetrics
	getConsistencyWindowValuesMetrics *codegen.MethodMetrics
	getInconsistenciesMetrics         *codegen.MethodMetrics
	resetMetrics                      *codegen.MethodMetrics
}

// Check that cancelService_local_stub implements the CancelService interface.
var _ CancelService = (*cancelService_local_stub)(nil)

func (s cancelService_local_stub) Calculate(ctx context.Context, a0 string, a1 string) (r0 string, err error) {
	// Update metrics.
	begin := s.calculateMetrics.Begin()
	defer func() { s.calculateMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.CancelService.Calculate", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Calculate(ctx, a0, a1)
}

func (s cancelService_local_stub) CancelTicket(ctx context.Context, a0 string, a1 string, a2 string) (r0 string, err error) {
	// Update metrics.
	begin := s.cancelTicketMetrics.Begin()
	defer func() { s.cancelTicketMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.CancelService.CancelTicket", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.CancelTicket(ctx, a0, a1, a2)
}

func (s cancelService_local_stub) GetConsistencyWindowValues(ctx context.Context) (r0 []float64, err error) {
	// Update metrics.
	begin := s.getConsistencyWindowValuesMetrics.Begin()
	defer func() { s.getConsistencyWindowValuesMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.CancelService.GetConsistencyWindowValues", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetConsistencyWindowValues(ctx)
}

func (s cancelService_local_stub) GetInconsistencies(ctx context.Context) (r0 int, err error) {
	// Update metrics.
	begin := s.getInconsistenciesMetrics.Begin()
	defer func() { s.getInconsistenciesMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.CancelService.GetInconsistencies", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetInconsistencies(ctx)
}

func (s cancelService_local_stub) Reset(ctx context.Context) (err error) {
	// Update metrics.
	begin := s.resetMetrics.Begin()
	defer func() { s.resetMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.CancelService.Reset", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Reset(ctx)
}

type insidePaymentService_local_stub struct {
	impl            InsidePaymentService
	tracer          trace.Tracer
	drawBackMetrics *codegen.MethodMetrics
}

// Check that insidePaymentService_local_stub implements the InsidePaymentService interface.
var _ InsidePaymentService = (*insidePaymentService_local_stub)(nil)

func (s insidePaymentService_local_stub) DrawBack(ctx context.Context, a0 string, a1 string, a2 string) (r0 string, err error) {
	// Update metrics.
	begin := s.drawBackMetrics.Begin()
	defer func() { s.drawBackMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.InsidePaymentService.DrawBack", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.DrawBack(ctx, a0, a1, a2)
}

type orderOtherService_local_stub struct {
	impl                OrderOtherService
	tracer              trace.Tracer
	getOrderByIdMetrics *codegen.MethodMetrics
	modifyOrderMetrics  *codegen.MethodMetrics
}

// Check that orderOtherService_local_stub implements the OrderOtherService interface.
var _ OrderOtherService = (*orderOtherService_local_stub)(nil)

func (s orderOtherService_local_stub) GetOrderById(ctx context.Context, a0 string, a1 string) (r0 model.Order, err error) {
	// Update metrics.
	begin := s.getOrderByIdMetrics.Begin()
	defer func() { s.getOrderByIdMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.OrderOtherService.GetOrderById", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetOrderById(ctx, a0, a1)
}

func (s orderOtherService_local_stub) ModifyOrder(ctx context.Context, a0 string, a1 uint16, a2 string) (r0 model.Order, err error) {
	// Update metrics.
	begin := s.modifyOrderMetrics.Begin()
	defer func() { s.modifyOrderMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.OrderOtherService.ModifyOrder", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ModifyOrder(ctx, a0, a1, a2)
}

type orderService_local_stub struct {
	impl                OrderService
	tracer              trace.Tracer
	getOrderByIdMetrics *codegen.MethodMetrics
	modifyOrderMetrics  *codegen.MethodMetrics
}

// Check that orderService_local_stub implements the OrderService interface.
var _ OrderService = (*orderService_local_stub)(nil)

func (s orderService_local_stub) GetOrderById(ctx context.Context, a0 string, a1 string) (r0 model.Order, err error) {
	// Update metrics.
	begin := s.getOrderByIdMetrics.Begin()
	defer func() { s.getOrderByIdMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.OrderService.GetOrderById", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetOrderById(ctx, a0, a1)
}

func (s orderService_local_stub) ModifyOrder(ctx context.Context, a0 string, a1 uint16, a2 string) (r0 model.Order, err error) {
	// Update metrics.
	begin := s.modifyOrderMetrics.Begin()
	defer func() { s.modifyOrderMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.OrderService.ModifyOrder", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ModifyOrder(ctx, a0, a1, a2)
}

// Client stub implementations.

type cancelService_client_stub struct {
	stub                              codegen.Stub
	calculateMetrics                  *codegen.MethodMetrics
	cancelTicketMetrics               *codegen.MethodMetrics
	getConsistencyWindowValuesMetrics *codegen.MethodMetrics
	getInconsistenciesMetrics         *codegen.MethodMetrics
	resetMetrics                      *codegen.MethodMetrics
}

// Check that cancelService_client_stub implements the CancelService interface.
var _ CancelService = (*cancelService_client_stub)(nil)

func (s cancelService_client_stub) Calculate(ctx context.Context, a0 string, a1 string) (r0 string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.calculateMetrics.Begin()
	defer func() { s.calculateMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.CancelService.Calculate", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	size += (4 + len(a1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	enc.String(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.String()
	err = dec.Error()
	return
}

func (s cancelService_client_stub) CancelTicket(ctx context.Context, a0 string, a1 string, a2 string) (r0 string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.cancelTicketMetrics.Begin()
	defer func() { s.cancelTicketMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.CancelService.CancelTicket", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	size += (4 + len(a1))
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	enc.String(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.String()
	err = dec.Error()
	return
}

func (s cancelService_client_stub) GetConsistencyWindowValues(ctx context.Context) (r0 []float64, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getConsistencyWindowValuesMetrics.Begin()
	defer func() { s.getConsistencyWindowValuesMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.CancelService.GetConsistencyWindowValues", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 2, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_float64_946dd0da(dec)
	err = dec.Error()
	return
}

func (s cancelService_client_stub) GetInconsistencies(ctx context.Context) (r0 int, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getInconsistenciesMetrics.Begin()
	defer func() { s.getInconsistenciesMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.CancelService.GetInconsistencies", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 3, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.Int()
	err = dec.Error()
	return
}

func (s cancelService_client_stub) Reset(ctx context.Context) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.resetMetrics.Begin()
	defer func() { s.resetMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.CancelService.Reset", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 4, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type insidePaymentService_client_stub struct {
	stub            codegen.Stub
	drawBackMetrics *codegen.MethodMetrics
}

// Check that insidePaymentService_client_stub implements the InsidePaymentService interface.
var _ InsidePaymentService = (*insidePaymentService_client_stub)(nil)

func (s insidePaymentService_client_stub) DrawBack(ctx context.Context, a0 string, a1 string, a2 string) (r0 string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.drawBackMetrics.Begin()
	defer func() { s.drawBackMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.InsidePaymentService.DrawBack", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	size += (4 + len(a1))
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	enc.String(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.String()
	err = dec.Error()
	return
}

type orderOtherService_client_stub struct {
	stub                codegen.Stub
	getOrderByIdMetrics *codegen.MethodMetrics
	modifyOrderMetrics  *codegen.MethodMetrics
}

// Check that orderOtherService_client_stub implements the OrderOtherService interface.
var _ OrderOtherService = (*orderOtherService_client_stub)(nil)

func (s orderOtherService_client_stub) GetOrderById(ctx context.Context, a0 string, a1 string) (r0 model.Order, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getOrderByIdMetrics.Begin()
	defer func() { s.getOrderByIdMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.OrderOtherService.GetOrderById", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	size += (4 + len(a1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	enc.String(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

func (s orderOtherService_client_stub) ModifyOrder(ctx context.Context, a0 string, a1 uint16, a2 string) (r0 model.Order, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.modifyOrderMetrics.Begin()
	defer func() { s.modifyOrderMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.OrderOtherService.ModifyOrder", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	size += 2
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	enc.Uint16(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

type orderService_client_stub struct {
	stub                codegen.Stub
	getOrderByIdMetrics *codegen.MethodMetrics
	modifyOrderMetrics  *codegen.MethodMetrics
}

// Check that orderService_client_stub implements the OrderService interface.
var _ OrderService = (*orderService_client_stub)(nil)

func (s orderService_client_stub) GetOrderById(ctx context.Context, a0 string, a1 string) (r0 model.Order, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getOrderByIdMetrics.Begin()
	defer func() { s.getOrderByIdMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.OrderService.GetOrderById", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	size += (4 + len(a1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	enc.String(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

func (s orderService_client_stub) ModifyOrder(ctx context.Context, a0 string, a1 uint16, a2 string) (r0 model.Order, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.modifyOrderMetrics.Begin()
	defer func() { s.modifyOrderMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.OrderService.ModifyOrder", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	size += 2
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	enc.Uint16(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][24]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.24.3 (codegen
version v0.24.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

type cancelService_server_stub struct {
	impl    CancelService
	addLoad func(key uint64, load float64)
}

// Check that cancelService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*cancelService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s cancelService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Calculate":
		return s.calculate
	case "CancelTicket":
		return s.cancelTicket
	case "GetConsistencyWindowValues":
		return s.getConsistencyWindowValues
	case "GetInconsistencies":
		return s.getInconsistencies
	case "Reset":
		return s.reset
	default:
		return nil
	}
}

func (s cancelService_server_stub) calculate(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 string
	a1 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Calculate(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.String(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s cancelService_server_stub) cancelTicket(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.CancelTicket(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.String(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s cancelService_server_stub) getConsistencyWindowValues(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetConsistencyWindowValues(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_float64_946dd0da(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s cancelService_server_stub) getInconsistencies(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetInconsistencies(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Int(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s cancelService_server_stub) reset(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Reset(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type insidePaymentService_server_stub struct {
	impl    InsidePaymentService
	addLoad func(key uint64, load float64)
}

// Check that insidePaymentService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*insidePaymentService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s insidePaymentService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "DrawBack":
		return s.drawBack
	default:
		return nil
	}
}

func (s insidePaymentService_server_stub) drawBack(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.DrawBack(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.String(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

type orderOtherService_server_stub struct {
	impl    OrderOtherService
	addLoad func(key uint64, load float64)
}

// Check that orderOtherService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*orderOtherService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s orderOtherService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GetOrderById":
		return s.getOrderById
	case "ModifyOrder":
		return s.modifyOrder
	default:
		return nil
	}
}

func (s orderOtherService_server_stub) getOrderById(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 string
	a1 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetOrderById(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s orderOtherService_server_stub) modifyOrder(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 uint16
	a1 = dec.Uint16()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.ModifyOrder(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

type orderService_server_stub struct {
	impl    OrderService
	addLoad func(key uint64, load float64)
}

// Check that orderService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*orderService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s orderService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GetOrderById":
		return s.getOrderById
	case "ModifyOrder":
		return s.modifyOrder
	default:
		return nil
	}
}

func (s orderService_server_stub) getOrderById(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 string
	a1 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetOrderById(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s orderService_server_stub) modifyOrder(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 uint16
	a1 = dec.Uint16()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.ModifyOrder(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type cancelService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that cancelService_reflect_stub implements the CancelService interface.
var _ CancelService = (*cancelService_reflect_stub)(nil)

func (s cancelService_reflect_stub) Calculate(ctx context.Context, a0 string, a1 string) (r0 string, err error) {
	err = s.caller("Calculate", ctx, []any{a0, a1}, []any{&r0})
	return
}

func (s cancelService_reflect_stub) CancelTicket(ctx context.Context, a0 string, a1 string, a2 string) (r0 string, err error) {
	err = s.caller("CancelTicket", ctx, []any{a0, a1, a2}, []any{&r0})
	return
}

func (s cancelService_reflect_stub) GetConsistencyWindowValues(ctx context.Context) (r0 []float64, err error) {
	err = s.caller("GetConsistencyWindowValues", ctx, []any{}, []any{&r0})
	return
}

func (s cancelService_reflect_stub) GetInconsistencies(ctx context.Context) (r0 int, err error) {
	err = s.caller("GetInconsistencies", ctx, []any{}, []any{&r0})
	return
}

func (s cancelService_reflect_stub) Reset(ctx context.Context) (err error) {
	err = s.caller("Reset", ctx, []any{}, []any{})
	return
}

type insidePaymentService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that insidePaymentService_reflect_stub implements the InsidePaymentService interface.
var _ InsidePaymentService = (*insidePaymentService_reflect_stub)(nil)

func (s insidePaymentService_reflect_stub) DrawBack(ctx context.Context, a0 string, a1 string, a2 string) (r0 string, err error) {
	err = s.caller("DrawBack", ctx, []any{a0, a1, a2}, []any{&r0})
	return
}

type orderOtherService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that orderOtherService_reflect_stub implements the OrderOtherService interface.
var _ OrderOtherService = (*orderOtherService_reflect_stub)(nil)

func (s orderOtherService_reflect_stub) GetOrderById(ctx context.Context, a0 string, a1 string) (r0 model.Order, err error) {
	err = s.caller("GetOrderById", ctx, []any{a0, a1}, []any{&r0})
	return
}

func (s orderOtherService_reflect_stub) ModifyOrder(ctx context.Context, a0 string, a1 uint16, a2 string) (r0 model.Order, err error) {
	err = s.caller("ModifyOrder", ctx, []any{a0, a1, a2}, []any{&r0})
	return
}

type orderService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that orderService_reflect_stub implements the OrderService interface.
var _ OrderService = (*orderService_reflect_stub)(nil)

func (s orderService_reflect_stub) GetOrderById(ctx context.Context, a0 string, a1 string) (r0 model.Order, err error) {
	err = s.caller("GetOrderById", ctx, []any{a0, a1}, []any{&r0})
	return
}

func (s orderService_reflect_stub) ModifyOrder(ctx context.Context, a0 string, a1 uint16, a2 string) (r0 model.Order, err error) {
	err = s.caller("ModifyOrder", ctx, []any{a0, a1, a2}, []any{&r0})
	return
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_float64_946dd0da(enc *codegen.Encoder, arg []float64) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.Float64(arg[i])
	}
}

func serviceweaver_dec_slice_float64_946dd0da(dec *codegen.Decoder) []float64 {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]float64, n)
	for i := 0; i < n; i++ {
		res[i] = dec.Float64()
	}
	return res
}
