// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package services

import (
	"context"
	"errors"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
	"us_deployment/pkg/model"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "us_deployment/pkg/services/SocialGraphService",
		Iface: reflect.TypeOf((*SocialGraphService)(nil)).Elem(),
		Impl:  reflect.TypeOf(socialGraphService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return socialGraphService_local_stub{impl: impl.(SocialGraphService), tracer: tracer, followMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/SocialGraphService", Method: "Follow", Remote: false, Generated: true}), followWithUsernameMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/SocialGraphService", Method: "FollowWithUsername", Remote: false, Generated: true}), getFolloweesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/SocialGraphService", Method: "GetFollowees", Remote: false, Generated: true}), getFollowersMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/SocialGraphService", Method: "GetFollowers", Remote: false, Generated: true}), insertUserMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/SocialGraphService", Method: "InsertUser", Remote: false, Generated: true}), unfollowMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/SocialGraphService", Method: "Unfollow", Remote: false, Generated: true}), unfollowWithUsernameMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/SocialGraphService", Method: "UnfollowWithUsername", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return socialGraphService_client_stub{stub: stub, followMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/SocialGraphService", Method: "Follow", Remote: true, Generated: true}), followWithUsernameMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/SocialGraphService", Method: "FollowWithUsername", Remote: true, Generated: true}), getFolloweesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/SocialGraphService", Method: "GetFollowees", Remote: true, Generated: true}), getFollowersMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/SocialGraphService", Method: "GetFollowers", Remote: true, Generated: true}), insertUserMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/SocialGraphService", Method: "InsertUser", Remote: true, Generated: true}), unfollowMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/SocialGraphService", Method: "Unfollow", Remote: true, Generated: true}), unfollowWithUsernameMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/SocialGraphService", Method: "UnfollowWithUsername", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return socialGraphService_server_stub{impl: impl.(SocialGraphService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return socialGraphService_reflect_stub{caller: caller}
		},
		RefData: "⟦f74f2425:wEaVeReDgE:us_deployment/pkg/services/SocialGraphService→us_deployment/pkg/services/UserService⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "us_deployment/pkg/services/UpdateHomeTimelineService",
		Iface: reflect.TypeOf((*UpdateHomeTimelineService)(nil)).Elem(),
		Impl:  reflect.TypeOf(updateHomeTimelineService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return updateHomeTimelineService_local_stub{impl: impl.(UpdateHomeTimelineService), tracer: tracer, updateHomeTimelineMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/UpdateHomeTimelineService", Method: "UpdateHomeTimeline", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return updateHomeTimelineService_client_stub{stub: stub, updateHomeTimelineMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/UpdateHomeTimelineService", Method: "UpdateHomeTimeline", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return updateHomeTimelineService_server_stub{impl: impl.(UpdateHomeTimelineService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return updateHomeTimelineService_reflect_stub{caller: caller}
		},
		RefData: "⟦b2a2a32e:wEaVeReDgE:us_deployment/pkg/services/UpdateHomeTimelineService→us_deployment/pkg/services/SocialGraphService⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "us_deployment/pkg/services/UserService",
		Iface: reflect.TypeOf((*UserService)(nil)).Elem(),
		Impl:  reflect.TypeOf(userService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return userService_local_stub{impl: impl.(UserService), tracer: tracer, getUserIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/UserService", Method: "GetUserId", Remote: false, Generated: true}), loginMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/UserService", Method: "Login", Remote: false, Generated: true}), registerUserMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/UserService", Method: "RegisterUser", Remote: false, Generated: true}), registerUserWithIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/UserService", Method: "RegisterUserWithId", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return userService_client_stub{stub: stub, getUserIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/UserService", Method: "GetUserId", Remote: true, Generated: true}), loginMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/UserService", Method: "Login", Remote: true, Generated: true}), registerUserMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/UserService", Method: "RegisterUser", Remote: true, Generated: true}), registerUserWithIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/UserService", Method: "RegisterUserWithId", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return userService_server_stub{impl: impl.(UserService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return userService_reflect_stub{caller: caller}
		},
		RefData: "⟦24a13b53:wEaVeReDgE:us_deployment/pkg/services/UserService→us_deployment/pkg/services/SocialGraphService⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "us_deployment/pkg/services/WriteHomeTimelineService",
		Iface: reflect.TypeOf((*WriteHomeTimelineService)(nil)).Elem(),
		Impl:  reflect.TypeOf(writeHomeTimelineService{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return writeHomeTimelineService_local_stub{impl: impl.(WriteHomeTimelineService), tracer: tracer, getConsistencyWindowValuesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/WriteHomeTimelineService", Method: "GetConsistencyWindowValues", Remote: false, Generated: true}), readNotificationsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/WriteHomeTimelineService", Method: "ReadNotifications", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return writeHomeTimelineService_client_stub{stub: stub, getConsistencyWindowValuesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/WriteHomeTimelineService", Method: "GetConsistencyWindowValues", Remote: true, Generated: true}), readNotificationsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "us_deployment/pkg/services/WriteHomeTimelineService", Method: "ReadNotifications", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return writeHomeTimelineService_server_stub{impl: impl.(WriteHomeTimelineService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return writeHomeTimelineService_reflect_stub{caller: caller}
		},
		RefData: "⟦18b7b7d9:wEaVeReDgE:us_deployment/pkg/services/WriteHomeTimelineService→us_deployment/pkg/services/SocialGraphService⟧\n",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[SocialGraphService] = (*socialGraphService)(nil)
var _ weaver.InstanceOf[UpdateHomeTimelineService] = (*updateHomeTimelineService)(nil)
var _ weaver.InstanceOf[UserService] = (*userService)(nil)
var _ weaver.InstanceOf[WriteHomeTimelineService] = (*writeHomeTimelineService)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*socialGraphService)(nil)
var _ weaver.Unrouted = (*updateHomeTimelineService)(nil)
var _ weaver.Unrouted = (*userService)(nil)
var _ weaver.Unrouted = (*writeHomeTimelineService)(nil)

// Local stub implementations.

type socialGraphService_local_stub struct {
	impl                        SocialGraphService
	tracer                      trace.Tracer
	followMetrics               *codegen.MethodMetrics
	followWithUsernameMetrics   *codegen.MethodMetrics
	getFolloweesMetrics         *codegen.MethodMetrics
	getFollowersMetrics         *codegen.MethodMetrics
	insertUserMetrics           *codegen.MethodMetrics
	unfollowMetrics             *codegen.MethodMetrics
	unfollowWithUsernameMetrics *codegen.MethodMetrics
}

// Check that socialGraphService_local_stub implements the SocialGraphService interface.
var _ SocialGraphService = (*socialGraphService_local_stub)(nil)

func (s socialGraphService_local_stub) Follow(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	begin := s.followMetrics.Begin()
	defer func() { s.followMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.SocialGraphService.Follow", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Follow(ctx, a0, a1, a2)
}

func (s socialGraphService_local_stub) FollowWithUsername(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	begin := s.followWithUsernameMetrics.Begin()
	defer func() { s.followWithUsernameMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.SocialGraphService.FollowWithUsername", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.FollowWithUsername(ctx, a0, a1, a2)
}

func (s socialGraphService_local_stub) GetFollowees(ctx context.Context, a0 int64, a1 string) (r0 []string, err error) {
	// Update metrics.
	begin := s.getFolloweesMetrics.Begin()
	defer func() { s.getFolloweesMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.SocialGraphService.GetFollowees", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetFollowees(ctx, a0, a1)
}

func (s socialGraphService_local_stub) GetFollowers(ctx context.Context, a0 int64, a1 string) (r0 []string, err error) {
	// Update metrics.
	begin := s.getFollowersMetrics.Begin()
	defer func() { s.getFollowersMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.SocialGraphService.GetFollowers", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetFollowers(ctx, a0, a1)
}

func (s socialGraphService_local_stub) InsertUser(ctx context.Context, a0 int64, a1 string) (err error) {
	// Update metrics.
	begin := s.insertUserMetrics.Begin()
	defer func() { s.insertUserMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.SocialGraphService.InsertUser", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.InsertUser(ctx, a0, a1)
}

func (s socialGraphService_local_stub) Unfollow(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	begin := s.unfollowMetrics.Begin()
	defer func() { s.unfollowMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.SocialGraphService.Unfollow", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Unfollow(ctx, a0, a1, a2)
}

func (s socialGraphService_local_stub) UnfollowWithUsername(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	begin := s.unfollowWithUsernameMetrics.Begin()
	defer func() { s.unfollowWithUsernameMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.SocialGraphService.UnfollowWithUsername", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UnfollowWithUsername(ctx, a0, a1, a2)
}

type updateHomeTimelineService_local_stub struct {
	impl                      UpdateHomeTimelineService
	tracer                    trace.Tracer
	updateHomeTimelineMetrics *codegen.MethodMetrics
}

// Check that updateHomeTimelineService_local_stub implements the UpdateHomeTimelineService interface.
var _ UpdateHomeTimelineService = (*updateHomeTimelineService_local_stub)(nil)

func (s updateHomeTimelineService_local_stub) UpdateHomeTimeline(ctx context.Context, a0 model.Message) (err error) {
	// Update metrics.
	begin := s.updateHomeTimelineMetrics.Begin()
	defer func() { s.updateHomeTimelineMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UpdateHomeTimelineService.UpdateHomeTimeline", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UpdateHomeTimeline(ctx, a0)
}

type userService_local_stub struct {
	impl                      UserService
	tracer                    trace.Tracer
	getUserIdMetrics          *codegen.MethodMetrics
	loginMetrics              *codegen.MethodMetrics
	registerUserMetrics       *codegen.MethodMetrics
	registerUserWithIdMetrics *codegen.MethodMetrics
}

// Check that userService_local_stub implements the UserService interface.
var _ UserService = (*userService_local_stub)(nil)

func (s userService_local_stub) GetUserId(ctx context.Context, a0 int64, a1 string) (r0 string, err error) {
	// Update metrics.
	begin := s.getUserIdMetrics.Begin()
	defer func() { s.getUserIdMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UserService.GetUserId", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetUserId(ctx, a0, a1)
}

func (s userService_local_stub) Login(ctx context.Context, a0 int64, a1 string, a2 string) (r0 string, err error) {
	// Update metrics.
	begin := s.loginMetrics.Begin()
	defer func() { s.loginMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UserService.Login", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Login(ctx, a0, a1, a2)
}

func (s userService_local_stub) RegisterUser(ctx context.Context, a0 int64, a1 string, a2 string, a3 string, a4 string) (err error) {
	// Update metrics.
	begin := s.registerUserMetrics.Begin()
	defer func() { s.registerUserMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UserService.RegisterUser", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.RegisterUser(ctx, a0, a1, a2, a3, a4)
}

func (s userService_local_stub) RegisterUserWithId(ctx context.Context, a0 int64, a1 string, a2 string, a3 string, a4 string, a5 string) (err error) {
	// Update metrics.
	begin := s.registerUserWithIdMetrics.Begin()
	defer func() { s.registerUserWithIdMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.UserService.RegisterUserWithId", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.RegisterUserWithId(ctx, a0, a1, a2, a3, a4, a5)
}

type writeHomeTimelineService_local_stub struct {
	impl                              WriteHomeTimelineService
	tracer                            trace.Tracer
	getConsistencyWindowValuesMetrics *codegen.MethodMetrics
	readNotificationsMetrics          *codegen.MethodMetrics
}

// Check that writeHomeTimelineService_local_stub implements the WriteHomeTimelineService interface.
var _ WriteHomeTimelineService = (*writeHomeTimelineService_local_stub)(nil)

func (s writeHomeTimelineService_local_stub) GetConsistencyWindowValues(ctx context.Context) (r0 []float64, err error) {
	// Update metrics.
	begin := s.getConsistencyWindowValuesMetrics.Begin()
	defer func() { s.getConsistencyWindowValuesMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.WriteHomeTimelineService.GetConsistencyWindowValues", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetConsistencyWindowValues(ctx)
}

func (s writeHomeTimelineService_local_stub) ReadNotifications(ctx context.Context) (err error) {
	// Update metrics.
	begin := s.readNotificationsMetrics.Begin()
	defer func() { s.readNotificationsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.WriteHomeTimelineService.ReadNotifications", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ReadNotifications(ctx)
}

// Client stub implementations.

type socialGraphService_client_stub struct {
	stub                        codegen.Stub
	followMetrics               *codegen.MethodMetrics
	followWithUsernameMetrics   *codegen.MethodMetrics
	getFolloweesMetrics         *codegen.MethodMetrics
	getFollowersMetrics         *codegen.MethodMetrics
	insertUserMetrics           *codegen.MethodMetrics
	unfollowMetrics             *codegen.MethodMetrics
	unfollowWithUsernameMetrics *codegen.MethodMetrics
}

// Check that socialGraphService_client_stub implements the SocialGraphService interface.
var _ SocialGraphService = (*socialGraphService_client_stub)(nil)

func (s socialGraphService_client_stub) Follow(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.followMetrics.Begin()
	defer func() { s.followMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.SocialGraphService.Follow", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s socialGraphService_client_stub) FollowWithUsername(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.followWithUsernameMetrics.Begin()
	defer func() { s.followWithUsernameMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.SocialGraphService.FollowWithUsername", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s socialGraphService_client_stub) GetFollowees(ctx context.Context, a0 int64, a1 string) (r0 []string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getFolloweesMetrics.Begin()
	defer func() { s.getFolloweesMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.SocialGraphService.GetFollowees", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_string_4af10117(dec)
	err = dec.Error()
	return
}

func (s socialGraphService_client_stub) GetFollowers(ctx context.Context, a0 int64, a1 string) (r0 []string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getFollowersMetrics.Begin()
	defer func() { s.getFollowersMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.SocialGraphService.GetFollowers", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_string_4af10117(dec)
	err = dec.Error()
	return
}

func (s socialGraphService_client_stub) InsertUser(ctx context.Context, a0 int64, a1 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.insertUserMetrics.Begin()
	defer func() { s.insertUserMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.SocialGraphService.InsertUser", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s socialGraphService_client_stub) Unfollow(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.unfollowMetrics.Begin()
	defer func() { s.unfollowMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.SocialGraphService.Unfollow", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 5, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s socialGraphService_client_stub) UnfollowWithUsername(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.unfollowWithUsernameMetrics.Begin()
	defer func() { s.unfollowWithUsernameMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.SocialGraphService.UnfollowWithUsername", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 6, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type updateHomeTimelineService_client_stub struct {
	stub                      codegen.Stub
	updateHomeTimelineMetrics *codegen.MethodMetrics
}

// Check that updateHomeTimelineService_client_stub implements the UpdateHomeTimelineService interface.
var _ UpdateHomeTimelineService = (*updateHomeTimelineService_client_stub)(nil)

func (s updateHomeTimelineService_client_stub) UpdateHomeTimeline(ctx context.Context, a0 model.Message) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.updateHomeTimelineMetrics.Begin()
	defer func() { s.updateHomeTimelineMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UpdateHomeTimelineService.UpdateHomeTimeline", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type userService_client_stub struct {
	stub                      codegen.Stub
	getUserIdMetrics          *codegen.MethodMetrics
	loginMetrics              *codegen.MethodMetrics
	registerUserMetrics       *codegen.MethodMetrics
	registerUserWithIdMetrics *codegen.MethodMetrics
}

// Check that userService_client_stub implements the UserService interface.
var _ UserService = (*userService_client_stub)(nil)

func (s userService_client_stub) GetUserId(ctx context.Context, a0 int64, a1 string) (r0 string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getUserIdMetrics.Begin()
	defer func() { s.getUserIdMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UserService.GetUserId", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.String()
	err = dec.Error()
	return
}

func (s userService_client_stub) Login(ctx context.Context, a0 int64, a1 string, a2 string) (r0 string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.loginMetrics.Begin()
	defer func() { s.loginMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UserService.Login", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.String()
	err = dec.Error()
	return
}

func (s userService_client_stub) RegisterUser(ctx context.Context, a0 int64, a1 string, a2 string, a3 string, a4 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.registerUserMetrics.Begin()
	defer func() { s.registerUserMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UserService.RegisterUser", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	size += (4 + len(a3))
	size += (4 + len(a4))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	enc.String(a3)
	enc.String(a4)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s userService_client_stub) RegisterUserWithId(ctx context.Context, a0 int64, a1 string, a2 string, a3 string, a4 string, a5 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.registerUserWithIdMetrics.Begin()
	defer func() { s.registerUserWithIdMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.UserService.RegisterUserWithId", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	size += (4 + len(a3))
	size += (4 + len(a4))
	size += (4 + len(a5))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	enc.String(a1)
	enc.String(a2)
	enc.String(a3)
	enc.String(a4)
	enc.String(a5)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type writeHomeTimelineService_client_stub struct {
	stub                              codegen.Stub
	getConsistencyWindowValuesMetrics *codegen.MethodMetrics
	readNotificationsMetrics          *codegen.MethodMetrics
}

// Check that writeHomeTimelineService_client_stub implements the WriteHomeTimelineService interface.
var _ WriteHomeTimelineService = (*writeHomeTimelineService_client_stub)(nil)

func (s writeHomeTimelineService_client_stub) GetConsistencyWindowValues(ctx context.Context) (r0 []float64, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getConsistencyWindowValuesMetrics.Begin()
	defer func() { s.getConsistencyWindowValuesMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.WriteHomeTimelineService.GetConsistencyWindowValues", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 0, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_float64_946dd0da(dec)
	err = dec.Error()
	return
}

func (s writeHomeTimelineService_client_stub) ReadNotifications(ctx context.Context) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.readNotificationsMetrics.Begin()
	defer func() { s.readNotificationsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.WriteHomeTimelineService.ReadNotifications", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 1, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][24]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.24.3 (codegen
version v0.24.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

type socialGraphService_server_stub struct {
	impl    SocialGraphService
	addLoad func(key uint64, load float64)
}

// Check that socialGraphService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*socialGraphService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s socialGraphService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Follow":
		return s.follow
	case "FollowWithUsername":
		return s.followWithUsername
	case "GetFollowees":
		return s.getFollowees
	case "GetFollowers":
		return s.getFollowers
	case "InsertUser":
		return s.insertUser
	case "Unfollow":
		return s.unfollow
	case "UnfollowWithUsername":
		return s.unfollowWithUsername
	default:
		return nil
	}
}

func (s socialGraphService_server_stub) follow(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Follow(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s socialGraphService_server_stub) followWithUsername(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.FollowWithUsername(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s socialGraphService_server_stub) getFollowees(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetFollowees(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_string_4af10117(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s socialGraphService_server_stub) getFollowers(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetFollowers(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_string_4af10117(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s socialGraphService_server_stub) insertUser(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.InsertUser(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s socialGraphService_server_stub) unfollow(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Unfollow(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s socialGraphService_server_stub) unfollowWithUsername(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UnfollowWithUsername(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type updateHomeTimelineService_server_stub struct {
	impl    UpdateHomeTimelineService
	addLoad func(key uint64, load float64)
}

// Check that updateHomeTimelineService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*updateHomeTimelineService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s updateHomeTimelineService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "UpdateHomeTimeline":
		return s.updateHomeTimeline
	default:
		return nil
	}
}

func (s updateHomeTimelineService_server_stub) updateHomeTimeline(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 model.Message
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UpdateHomeTimeline(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type userService_server_stub struct {
	impl    UserService
	addLoad func(key uint64, load float64)
}

// Check that userService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*userService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s userService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GetUserId":
		return s.getUserId
	case "Login":
		return s.login
	case "RegisterUser":
		return s.registerUser
	case "RegisterUserWithId":
		return s.registerUserWithId
	default:
		return nil
	}
}

func (s userService_server_stub) getUserId(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetUserId(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.String(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s userService_server_stub) login(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Login(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.String(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s userService_server_stub) registerUser(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()
	var a3 string
	a3 = dec.String()
	var a4 string
	a4 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.RegisterUser(ctx, a0, a1, a2, a3, a4)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s userService_server_stub) registerUserWithId(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()
	var a3 string
	a3 = dec.String()
	var a4 string
	a4 = dec.String()
	var a5 string
	a5 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.RegisterUserWithId(ctx, a0, a1, a2, a3, a4, a5)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type writeHomeTimelineService_server_stub struct {
	impl    WriteHomeTimelineService
	addLoad func(key uint64, load float64)
}

// Check that writeHomeTimelineService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*writeHomeTimelineService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s writeHomeTimelineService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GetConsistencyWindowValues":
		return s.getConsistencyWindowValues
	case "ReadNotifications":
		return s.readNotifications
	default:
		return nil
	}
}

func (s writeHomeTimelineService_server_stub) getConsistencyWindowValues(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetConsistencyWindowValues(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_float64_946dd0da(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s writeHomeTimelineService_server_stub) readNotifications(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.ReadNotifications(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type socialGraphService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that socialGraphService_reflect_stub implements the SocialGraphService interface.
var _ SocialGraphService = (*socialGraphService_reflect_stub)(nil)

func (s socialGraphService_reflect_stub) Follow(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	err = s.caller("Follow", ctx, []any{a0, a1, a2}, []any{})
	return
}

func (s socialGraphService_reflect_stub) FollowWithUsername(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	err = s.caller("FollowWithUsername", ctx, []any{a0, a1, a2}, []any{})
	return
}

func (s socialGraphService_reflect_stub) GetFollowees(ctx context.Context, a0 int64, a1 string) (r0 []string, err error) {
	err = s.caller("GetFollowees", ctx, []any{a0, a1}, []any{&r0})
	return
}

func (s socialGraphService_reflect_stub) GetFollowers(ctx context.Context, a0 int64, a1 string) (r0 []string, err error) {
	err = s.caller("GetFollowers", ctx, []any{a0, a1}, []any{&r0})
	return
}

func (s socialGraphService_reflect_stub) InsertUser(ctx context.Context, a0 int64, a1 string) (err error) {
	err = s.caller("InsertUser", ctx, []any{a0, a1}, []any{})
	return
}

func (s socialGraphService_reflect_stub) Unfollow(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	err = s.caller("Unfollow", ctx, []any{a0, a1, a2}, []any{})
	return
}

func (s socialGraphService_reflect_stub) UnfollowWithUsername(ctx context.Context, a0 int64, a1 string, a2 string) (err error) {
	err = s.caller("UnfollowWithUsername", ctx, []any{a0, a1, a2}, []any{})
	return
}

type updateHomeTimelineService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that updateHomeTimelineService_reflect_stub implements the UpdateHomeTimelineService interface.
var _ UpdateHomeTimelineService = (*updateHomeTimelineService_reflect_stub)(nil)

func (s updateHomeTimelineService_reflect_stub) UpdateHomeTimeline(ctx context.Context, a0 model.Message) (err error) {
	err = s.caller("UpdateHomeTimeline", ctx, []any{a0}, []any{})
	return
}

type userService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that userService_reflect_stub implements the UserService interface.
var _ UserService = (*userService_reflect_stub)(nil)

func (s userService_reflect_stub) GetUserId(ctx context.Context, a0 int64, a1 string) (r0 string, err error) {
	err = s.caller("GetUserId", ctx, []any{a0, a1}, []any{&r0})
	return
}

func (s userService_reflect_stub) Login(ctx context.Context, a0 int64, a1 string, a2 string) (r0 string, err error) {
	err = s.caller("Login", ctx, []any{a0, a1, a2}, []any{&r0})
	return
}

func (s userService_reflect_stub) RegisterUser(ctx context.Context, a0 int64, a1 string, a2 string, a3 string, a4 string) (err error) {
	err = s.caller("RegisterUser", ctx, []any{a0, a1, a2, a3, a4}, []any{})
	return
}

func (s userService_reflect_stub) RegisterUserWithId(ctx context.Context, a0 int64, a1 string, a2 string, a3 string, a4 string, a5 string) (err error) {
	err = s.caller("RegisterUserWithId", ctx, []any{a0, a1, a2, a3, a4, a5}, []any{})
	return
}

type writeHomeTimelineService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that writeHomeTimelineService_reflect_stub implements the WriteHomeTimelineService interface.
var _ WriteHomeTimelineService = (*writeHomeTimelineService_reflect_stub)(nil)

func (s writeHomeTimelineService_reflect_stub) GetConsistencyWindowValues(ctx context.Context) (r0 []float64, err error) {
	err = s.caller("GetConsistencyWindowValues", ctx, []any{}, []any{&r0})
	return
}

func (s writeHomeTimelineService_reflect_stub) ReadNotifications(ctx context.Context) (err error) {
	err = s.caller("ReadNotifications", ctx, []any{}, []any{})
	return
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_string_4af10117(enc *codegen.Encoder, arg []string) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.String(arg[i])
	}
}

func serviceweaver_dec_slice_string_4af10117(dec *codegen.Decoder) []string {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]string, n)
	for i := 0; i < n; i++ {
		res[i] = dec.String()
	}
	return res
}

func serviceweaver_enc_slice_float64_946dd0da(enc *codegen.Encoder, arg []float64) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.Float64(arg[i])
	}
}

func serviceweaver_dec_slice_float64_946dd0da(dec *codegen.Decoder) []float64 {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]float64, n)
	for i := 0; i < n; i++ {
		res[i] = dec.Float64()
	}
	return res
}
